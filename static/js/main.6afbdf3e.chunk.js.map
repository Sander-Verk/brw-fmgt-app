{"version":3,"sources":["graphql/schema.tsx","reportWebVitals.ts","layout/components/footer/footer.tsx","layout/components/sideNavigation/sideNavigation.tsx","layout/components/header/components/userDropdown/userDropdown.tsx","layout/components/header/header.tsx","components/errorMessage/errorMessage.tsx","components/loader/loading.gif","components/loader/loading.tsx","components/loader/index.tsx","components/addLogbookItem/components/materialCheckForm/materialCheckForm.tsx","components/addLogbookItem/components/problemReportForm/problemReportForm.tsx","graphql/mutations/createMaterialCheck.ts","components/addLogbookItem/addLogbookItem.tsx","components/addLogbookItem/index.tsx","components/appTable/appTable.tsx","graphql/fragments/materialCheckReportFields.ts","graphql/mutations/addLogbookStatusUpdate.ts","pages/logbook/logbookDetail/components/materialCheckReport/materialCheckReport.tsx","pages/logbook/logbookDetail/logbookDetail.tsx","pages/logbook/logbookDetail/index.tsx","components/translated/translated.tsx","pages/logbook/logbookOverview/components/addLogbookItemModal/addLogbookItemModal.tsx","components/logbookList/logbookList.tsx","components/truckSelector/truckSelector.tsx","pages/logbook/logbookOverview/components/logbookFilter/logbookFilter.tsx","pages/logbook/logbookOverview/logbookOverview.tsx","pages/logbook/logbookOverview/index.tsx","graphql/mutations/createMaterialType.ts","pages/material/materialsOverview/components/addMaterialTypeModal/addMaterialTypeModal.tsx","pages/material/materialsOverview/materialsOverview.tsx","pages/material/materialsOverview/index.tsx","graphql/fragments/truckDetailFragment.ts","graphql/mutations/createCompartment.ts","pages/truck/truckDetail/components/addCompartmentModal/addCompartmentModal.tsx","utils/material.helper.ts","components/compartmentList/components/sectionBlock/sectionBlock.tsx","components/compartmentList/components/compartmentBlock/compartmentBlock.tsx","components/compartmentList/compartmentList.tsx","pages/truck/truckDetail/truckDetail.tsx","pages/truck/truckDetail/index.tsx","components/truckCard/truckCard.tsx","pages/truck/truckOverview/truckOverview.tsx","pages/truck/truckOverview/index.tsx","layout/appRouter.tsx","layout/appLayout.tsx","layout/index.tsx","app.tsx","translations/index.ts","translations/en.ts","index.tsx"],"names":["HistoryStatus","LogBookItemType","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AppFooter","t","useTranslation","className","style","textAlign","items","text","icon","CarOutlined","url","ToolOutlined","BookOutlined","SideNavigation","onUrlChange","map","item","i","to","activeClassName","onClick","React","createElement","UserDropdown","user","useAuthUser","userMenu","Item","SettingOutlined","AdminPortal","show","InfoCircleOutlined","LogoutOutlined","overlay","src","profilePictureUrl","name","DownOutlined","AppHeader","hasBroken","collapsed","setCollapsed","MenuUnfoldOutlined","MenuFoldOutlined","defaultOptions","MaterialCheckReportFieldsFragmentDoc","gql","TruckDetailFragmentFragmentDoc","GetLogbookDocument","useGetLogbookQuery","baseOptions","options","Apollo","GetLogbookItemDocument","GetMaterialTypesDocument","GetTruckDocument","useGetTruckQuery","GetTrucksDocument","useGetTrucksQuery","ErrorMessage","message","showIcon","type","action","placement","title","Loading","Gif","alt","width","LoadingContainer","_","require","MaterialCheckForm","truckId","variables","id","data","error","loading","mapMaterials","materials","grouped","groupBy","Object","keys","key","materialTypeId","amount","length","check","mapMaterialForm","compartments","array","sort","a","b","code","c","sections","s","renderCompartment","field","comparmentForm","List","initialValue","fields","section","renderSection","compartmentId","sectionId","truck","find","getSection","fieldKey","sectionForm","gutter","span","material","renderMaterial","m","getMaterialTypeName","imageUrl","materialForm","materialTypeName","valuePropName","comparments","ProblemReportForm","add","remove","offset","align","label","rules","required","MinusCircleOutlined","block","PlusOutlined","MUTATION_CREATE_MATERIAL_CHECK","Option","Select","AddLogbookItem","trucks","MaterialCheck","history","useHistory","selectedTruckId","setSelectedTruckId","graphqlError","setGraphqlError","useMutation","creatematerialCheck","Form","useForm","form","onFinish","values","materialCheck","result","resetFields","push","createMaterialCheck","toLowerCase","autoComplete","requiredMark","showSearch","placeholder","filterOption","input","option","children","indexOf","onChange","value","ProblemReport","submit","AddLogbookItemContainer","query","search","useLocation","useMemo","URLSearchParams","useQuery","get","undefined","AppTable","dataSource","columns","pagination","showHeader","onRow","position","MATERIAL_CHECK_REPORT_FIELDS","ADD_MATERIALCHECK_UPDATE","TabPane","Tabs","dataIndex","render","CheckCircleFilled","CloseCircleFilled","MaterialCheckReport","materialChecks","addMaterialCheckUpdate","materialType","logbookId","status","defaultActiveKey","tab","historyItem","format","timestamp","renderHistoryItem","toUpperCase","forEach","compartment","renderRecap","LogbookItemDetail","logbookItem","checks","statusHistory","LogbookItemDetailContainer","useGetLogbookItemQuery","useParams","Translated","AddLogbookItemModal","isModalVisible","setIsModalVisible","visible","onCancel","cancelText","okButtonProps","hidden","hoverable","cover","WarningOutlined","ControlOutlined","LogbookList","logbook","createdAt","record","TruckSelector","mode","minWidth","some","includes","index","RangePicker","DatePicker","LogbookFilter","layout","onValuesChange","info","truckIds","from","date","toISOString","types","LogbookOverview","onFilterChange","LogbookOverviewContainer","refetch","filters","filter","MUTATION_CREATE_MATERIALTYPE","AddMaterialTypeModal","creatematerialType","description","codeFiche","handleReset","onOk","okText","MaterialOverview","materialTypes","MaterialOverviewContainer","useGetMaterialTypesQuery","TRUCK_DETAIL_FRAGMENT","MUTATION_CREATE_COMPARTMENT","AddCompartmentModal","createCompartment","countMaterials","counts","num","materialName","SectionBlock","Panel","Collapse","CompartmentBlock","isOpen","setIsOpen","expandIconPosition","header","extra","ghost","event","stopPropagation","PlusCircleOutlined","forceRender","CompartmentList","TruckDetail","logbookData","radioValue","setRadioValue","onBack","Group","target","optionType","buttonStyle","TruckDetailContainer","TruckCard","min","max","Math","floor","random","TruckOverview","size","prefix","SearchOutlined","TruckOverviewContainer","AppRouter","path","exact","AppLayout","setHasBroken","minHeight","padding","trigger","collapsible","collapsedWidth","breakpoint","onBreakpoint","CloseOutlined","margin","AppLayoutContainer","App","useAuth","isAuthenticated","localStorage","setItem","accessToken","Translations","en","translation","authentication","login","landingPage","footer","mainText","navigation","about","logout","settings","materialsOverview","truckDetail","noImage","noSection","printList","addCompartmentModal","openBtn","addSectionModal","addMaterialTypeModal","addMaterialModal","btn","cancel","save","errors","somethingWentWrong","logbookOverview","period","logbookItems","logbookItemType","problem_report","material_check","logbookItemDetail","recap","addLogbookItem","addLogbookItemModal","historyStatus","created","reviewed","finished","unknown","problemReportForm","addProblem","httpLink","createHttpLink","uri","authLink","setContext","headers","token","getItem","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","i18n","use","initReactI18next","init","resources","lng","fallbackLng","interpolation","escapeValue","ReactDOM","ApolloProvider","StrictMode","contextOptions","baseUrl","document","getElementById"],"mappings":"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","file":"static/js/main.6afbdf3e.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n};\n\nexport type Compartment = {\n  __typename?: 'Compartment';\n  code: Scalars['String'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  sections: Array<Section>;\n};\n\nexport type CompartmentCheck = {\n  __typename?: 'CompartmentCheck';\n  code: Scalars['String'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  sections: Array<SectionCheck>;\n};\n\nexport type CompartmentCheckInput = {\n  code: Scalars['String'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  sections: Array<SectionCheckInput>;\n};\n\nexport type CreateCompartmentInput = {\n  code: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type CreateMaterialInput = {\n  date?: Maybe<Scalars['DateTime']>;\n  materialTypeId: Scalars['ID'];\n  serial?: Maybe<Scalars['String']>;\n};\n\nexport type CreateMaterialTypeInput = {\n  code: Scalars['String'];\n  codeFiche?: Maybe<Scalars['String']>;\n  description: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type CreateSectionInput = {\n  imageUrl: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type CreateTruckInput = {\n  code: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport enum HistoryStatus {\n  Created = 'CREATED',\n  Finished = 'FINISHED',\n  Reviewed = 'REVIEWED',\n  Unknown = 'UNKNOWN'\n}\n\nexport type ImageSize = {\n  __typename?: 'ImageSize';\n  height: Scalars['Int'];\n  width: Scalars['Int'];\n};\n\nexport enum LogBookItemType {\n  MaterialCheck = 'MATERIAL_CHECK',\n  ProblemReport = 'PROBLEM_REPORT'\n}\n\nexport type LogbookFilterInput = {\n  from?: Maybe<Scalars['DateTime']>;\n  status?: Maybe<Array<HistoryStatus>>;\n  to?: Maybe<Scalars['DateTime']>;\n  truckIds?: Maybe<Array<Scalars['ID']>>;\n  types?: Maybe<Array<LogBookItemType>>;\n};\n\nexport type LogbookItem = MaterialCheckReport | ProblemReport;\n\nexport type LogbookResult = {\n  __typename?: 'LogbookResult';\n  count: Scalars['Int'];\n  items: Array<LogbookItem>;\n};\n\nexport type Material = {\n  __typename?: 'Material';\n  date?: Maybe<Scalars['DateTime']>;\n  id: Scalars['ID'];\n  serial?: Maybe<Scalars['String']>;\n  type: MaterialType;\n};\n\nexport type MaterialCheck = {\n  __typename?: 'MaterialCheck';\n  amount: Scalars['Int'];\n  check: Scalars['Boolean'];\n  materialType: MaterialType;\n  remark?: Maybe<Scalars['String']>;\n};\n\nexport type MaterialCheckInput = {\n  amount: Scalars['Int'];\n  check: Scalars['Boolean'];\n  materialTypeId: Scalars['ID'];\n  remark?: Maybe<Scalars['String']>;\n};\n\nexport type MaterialCheckReport = {\n  __typename?: 'MaterialCheckReport';\n  checks: Array<CompartmentCheck>;\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  status: HistoryStatus;\n  statusHistory: Array<StatusHistoryItem>;\n  truck: Truck;\n  type: LogBookItemType;\n  user: User;\n};\n\nexport type MaterialCheckReportInput = {\n  checks: Array<CompartmentCheckInput>;\n  truckId: Scalars['ID'];\n};\n\nexport type MaterialResult = {\n  __typename?: 'MaterialResult';\n  count: Scalars['Int'];\n  items: Array<Material>;\n};\n\nexport type MaterialType = {\n  __typename?: 'MaterialType';\n  code: Scalars['String'];\n  codeFiche?: Maybe<Scalars['String']>;\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type MaterialTypeFilterInput = {\n  codes?: Maybe<Array<Scalars['String']>>;\n  search?: Maybe<Scalars['String']>;\n};\n\nexport type MaterialTypeResult = {\n  __typename?: 'MaterialTypeResult';\n  count: Scalars['Int'];\n  items: Array<MaterialType>;\n};\n\nexport type MaterialsFilterInput = {\n  materialTypeId?: Maybe<Scalars['ID']>;\n  search?: Maybe<Scalars['String']>;\n  truckCodes?: Maybe<Array<Scalars['String']>>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addLogbookStatusUpdate: LogbookItem;\n  addMaterial: Truck;\n  createCompartment: Truck;\n  createMaterial: Material;\n  createMaterialCheck: MaterialCheckReport;\n  createMaterialType: MaterialType;\n  createMaterialWithTruck: Truck;\n  createSection: Truck;\n  createTruck: Truck;\n  updateMaterial: Material;\n  updateMaterialType: MaterialType;\n};\n\n\nexport type MutationAddLogbookStatusUpdateArgs = {\n  logbookId: Scalars['ID'];\n  status: HistoryStatus;\n};\n\n\nexport type MutationAddMaterialArgs = {\n  compartmentId: Scalars['ID'];\n  materialId: Scalars['ID'];\n  sectionId: Scalars['ID'];\n  truckId: Scalars['ID'];\n};\n\n\nexport type MutationCreateCompartmentArgs = {\n  compartment: CreateCompartmentInput;\n  truckId: Scalars['ID'];\n};\n\n\nexport type MutationCreateMaterialArgs = {\n  material: CreateMaterialInput;\n};\n\n\nexport type MutationCreateMaterialCheckArgs = {\n  materialCheck: MaterialCheckReportInput;\n};\n\n\nexport type MutationCreateMaterialTypeArgs = {\n  materialType: CreateMaterialTypeInput;\n};\n\n\nexport type MutationCreateMaterialWithTruckArgs = {\n  compartmentId: Scalars['ID'];\n  material: CreateMaterialInput;\n  sectionId: Scalars['ID'];\n  truckId: Scalars['ID'];\n};\n\n\nexport type MutationCreateSectionArgs = {\n  compartmentId: Scalars['ID'];\n  section: CreateSectionInput;\n  truckId: Scalars['ID'];\n};\n\n\nexport type MutationCreateTruckArgs = {\n  truck: CreateTruckInput;\n};\n\n\nexport type MutationUpdateMaterialArgs = {\n  id: Scalars['String'];\n  material: UpdateMaterialInput;\n};\n\n\nexport type MutationUpdateMaterialTypeArgs = {\n  id: Scalars['ID'];\n  materialType: UpdateMaterialTypeInput;\n};\n\nexport type ProblemReport = {\n  __typename?: 'ProblemReport';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  issues: Array<ProblemReportIssue>;\n  status: HistoryStatus;\n  statusHistory: Array<StatusHistoryItem>;\n  truck: Truck;\n  type: LogBookItemType;\n  user: User;\n};\n\nexport type ProblemReportIssue = {\n  __typename?: 'ProblemReportIssue';\n  description: Scalars['String'];\n  part: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  logbook: LogbookResult;\n  logbookItem: LogbookItem;\n  material: Material;\n  materialType: MaterialType;\n  materialTypes: MaterialTypeResult;\n  materials: MaterialResult;\n  truck: Truck;\n  truckPDF: Scalars['String'];\n  trucks: TruckResult;\n};\n\n\nexport type QueryLogbookArgs = {\n  filter?: Maybe<LogbookFilterInput>;\n  limit?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLogbookItemArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryMaterialArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryMaterialTypeArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryMaterialTypesArgs = {\n  filter?: Maybe<MaterialTypeFilterInput>;\n  limit?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMaterialsArgs = {\n  filter?: Maybe<MaterialsFilterInput>;\n  limit?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTruckArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTruckPdfArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTrucksArgs = {\n  filter?: Maybe<TruckFilterInput>;\n  limit?: Maybe<Scalars['Int']>;\n  skip?: Maybe<Scalars['Int']>;\n};\n\nexport type Section = {\n  __typename?: 'Section';\n  id: Scalars['ID'];\n  imageSize?: Maybe<ImageSize>;\n  imageUrl?: Maybe<Scalars['String']>;\n  materials: Array<Material>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type SectionCheck = {\n  __typename?: 'SectionCheck';\n  id: Scalars['ID'];\n  materials: Array<MaterialCheck>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type SectionCheckInput = {\n  id: Scalars['ID'];\n  materials: Array<MaterialCheckInput>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type StatusHistoryItem = {\n  __typename?: 'StatusHistoryItem';\n  status: HistoryStatus;\n  timestamp: Scalars['DateTime'];\n  user: User;\n};\n\nexport type Truck = {\n  __typename?: 'Truck';\n  code: Scalars['String'];\n  compartments: Array<Compartment>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type TruckFilterInput = {\n  search?: Maybe<Scalars['String']>;\n};\n\nexport type TruckResult = {\n  __typename?: 'TruckResult';\n  count: Scalars['Int'];\n  items: Array<Truck>;\n};\n\nexport type UpdateMaterialInput = {\n  date?: Maybe<Scalars['DateTime']>;\n  serial?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateMaterialTypeInput = {\n  codeFiche?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  email: Scalars['String'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  profilePicture: Scalars['String'];\n};\n\nexport type MaterialCheckReportFieldsFragment = { __typename?: 'MaterialCheckReport', id: string, createdAt: any, type: LogBookItemType, status: HistoryStatus, truck: { __typename?: 'Truck', id: string, name: string }, user: { __typename?: 'User', id: string, name: string }, statusHistory: Array<{ __typename?: 'StatusHistoryItem', status: HistoryStatus, timestamp: any, user: { __typename?: 'User', id: string, name: string } }>, checks: Array<{ __typename?: 'CompartmentCheck', id: string, code: string, name: string, sections: Array<{ __typename?: 'SectionCheck', id: string, name?: string | null | undefined, materials: Array<{ __typename?: 'MaterialCheck', amount: number, check: boolean, remark?: string | null | undefined, materialType: { __typename?: 'MaterialType', id: string, name: string } }> }> }> };\n\nexport type TruckDetailFragmentFragment = { __typename?: 'Truck', id: string, code: string, name: string, compartments: Array<{ __typename?: 'Compartment', id: string, code: string, name: string, sections: Array<{ __typename?: 'Section', id: string, name?: string | null | undefined, imageUrl?: string | null | undefined, materials: Array<{ __typename?: 'Material', id: string, serial?: string | null | undefined, date?: any | null | undefined, type: { __typename?: 'MaterialType', id: string, code: string, name: string, description: string, codeFiche?: string | null | undefined } }> }> }> };\n\nexport type AddLogbookStatusUpdateMutationVariables = Exact<{\n  logbookId: Scalars['ID'];\n  status: HistoryStatus;\n}>;\n\n\nexport type AddLogbookStatusUpdateMutation = { __typename?: 'Mutation', addLogbookStatusUpdate: { __typename?: 'MaterialCheckReport', id: string, createdAt: any, type: LogBookItemType, status: HistoryStatus, truck: { __typename?: 'Truck', id: string, name: string }, user: { __typename?: 'User', id: string, name: string }, statusHistory: Array<{ __typename?: 'StatusHistoryItem', status: HistoryStatus, timestamp: any, user: { __typename?: 'User', id: string, name: string } }>, checks: Array<{ __typename?: 'CompartmentCheck', id: string, code: string, name: string, sections: Array<{ __typename?: 'SectionCheck', id: string, name?: string | null | undefined, materials: Array<{ __typename?: 'MaterialCheck', amount: number, check: boolean, remark?: string | null | undefined, materialType: { __typename?: 'MaterialType', id: string, name: string } }> }> }> } | { __typename?: 'ProblemReport' } };\n\nexport type CreateCompartmentMutationVariables = Exact<{\n  truckId: Scalars['ID'];\n  compartment: CreateCompartmentInput;\n}>;\n\n\nexport type CreateCompartmentMutation = { __typename?: 'Mutation', createCompartment: { __typename?: 'Truck', id: string, code: string, name: string, compartments: Array<{ __typename?: 'Compartment', id: string, code: string, name: string, sections: Array<{ __typename?: 'Section', id: string, name?: string | null | undefined, imageUrl?: string | null | undefined, materials: Array<{ __typename?: 'Material', id: string, serial?: string | null | undefined, date?: any | null | undefined, type: { __typename?: 'MaterialType', id: string, code: string, name: string, description: string, codeFiche?: string | null | undefined } }> }> }> } };\n\nexport type CreateMaterialCheckMutationVariables = Exact<{\n  materialCheck: MaterialCheckReportInput;\n}>;\n\n\nexport type CreateMaterialCheckMutation = { __typename?: 'Mutation', createMaterialCheck: { __typename?: 'MaterialCheckReport', id: string, createdAt: any, type: LogBookItemType, truck: { __typename?: 'Truck', id: string, name: string }, user: { __typename?: 'User', id: string, name: string }, checks: Array<{ __typename?: 'CompartmentCheck', id: string, code: string, name: string, sections: Array<{ __typename?: 'SectionCheck', id: string, name?: string | null | undefined, materials: Array<{ __typename?: 'MaterialCheck', amount: number, check: boolean, remark?: string | null | undefined, materialType: { __typename?: 'MaterialType', id: string } }> }> }> } };\n\nexport type CreateMaterialTypeMutationVariables = Exact<{\n  materialType: CreateMaterialTypeInput;\n}>;\n\n\nexport type CreateMaterialTypeMutation = { __typename?: 'Mutation', createMaterialType: { __typename?: 'MaterialType', id: string, code: string, name: string, description: string, codeFiche?: string | null | undefined } };\n\nexport type CreateMaterialWithTruckMutationVariables = Exact<{\n  truckId: Scalars['ID'];\n  compartmentId: Scalars['ID'];\n  sectionId: Scalars['ID'];\n  material: CreateMaterialInput;\n}>;\n\n\nexport type CreateMaterialWithTruckMutation = { __typename?: 'Mutation', createMaterialWithTruck: { __typename?: 'Truck', id: string, code: string, name: string, compartments: Array<{ __typename?: 'Compartment', id: string, code: string, name: string, sections: Array<{ __typename?: 'Section', id: string, name?: string | null | undefined, imageUrl?: string | null | undefined, materials: Array<{ __typename?: 'Material', id: string, serial?: string | null | undefined, date?: any | null | undefined, type: { __typename?: 'MaterialType', id: string, code: string, name: string, description: string, codeFiche?: string | null | undefined } }> }> }> } };\n\nexport type CreateSectionMutationVariables = Exact<{\n  truckId: Scalars['ID'];\n  compartmentId: Scalars['ID'];\n  section: CreateSectionInput;\n}>;\n\n\nexport type CreateSectionMutation = { __typename?: 'Mutation', createSection: { __typename?: 'Truck', id: string, code: string, name: string, compartments: Array<{ __typename?: 'Compartment', id: string, code: string, name: string, sections: Array<{ __typename?: 'Section', id: string, name?: string | null | undefined, imageUrl?: string | null | undefined, materials: Array<{ __typename?: 'Material', id: string, serial?: string | null | undefined, date?: any | null | undefined, type: { __typename?: 'MaterialType', id: string, code: string, name: string, description: string, codeFiche?: string | null | undefined } }> }> }> } };\n\nexport type GetLogbookQueryVariables = Exact<{\n  filter?: Maybe<LogbookFilterInput>;\n  skip?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetLogbookQuery = { __typename?: 'Query', logbook: { __typename?: 'LogbookResult', count: number, items: Array<{ __typename?: 'MaterialCheckReport', id: string, createdAt: any, type: LogBookItemType, status: HistoryStatus, truck: { __typename?: 'Truck', id: string, name: string, code: string }, user: { __typename?: 'User', id: string, name: string } } | { __typename?: 'ProblemReport', id: string, createdAt: any, type: LogBookItemType, status: HistoryStatus, truck: { __typename?: 'Truck', id: string, name: string, code: string }, user: { __typename?: 'User', id: string, name: string } }> } };\n\nexport type GetLogbookItemQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type GetLogbookItemQuery = { __typename?: 'Query', logbookItem: { __typename: 'MaterialCheckReport', id: string, createdAt: any, type: LogBookItemType, status: HistoryStatus, truck: { __typename?: 'Truck', id: string, name: string }, user: { __typename?: 'User', id: string, name: string }, statusHistory: Array<{ __typename?: 'StatusHistoryItem', status: HistoryStatus, timestamp: any, user: { __typename?: 'User', id: string, name: string } }>, checks: Array<{ __typename?: 'CompartmentCheck', id: string, code: string, name: string, sections: Array<{ __typename?: 'SectionCheck', id: string, name?: string | null | undefined, materials: Array<{ __typename?: 'MaterialCheck', amount: number, check: boolean, remark?: string | null | undefined, materialType: { __typename?: 'MaterialType', id: string, name: string } }> }> }> } | { __typename: 'ProblemReport', id: string, createdAt: any, type: LogBookItemType, truck: { __typename?: 'Truck', id: string, name: string, code: string }, user: { __typename?: 'User', id: string, name: string }, issues: Array<{ __typename?: 'ProblemReportIssue', part: string, description: string }> } };\n\nexport type GetMaterialTypesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMaterialTypesQuery = { __typename?: 'Query', materialTypes: { __typename?: 'MaterialTypeResult', count: number, items: Array<{ __typename?: 'MaterialType', id: string, code: string, name: string, description: string, codeFiche?: string | null | undefined }> } };\n\nexport type GetTruckQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type GetTruckQuery = { __typename?: 'Query', truck: { __typename?: 'Truck', id: string, code: string, name: string, compartments: Array<{ __typename?: 'Compartment', id: string, code: string, name: string, sections: Array<{ __typename?: 'Section', id: string, name?: string | null | undefined, imageUrl?: string | null | undefined, materials: Array<{ __typename?: 'Material', id: string, serial?: string | null | undefined, date?: any | null | undefined, type: { __typename?: 'MaterialType', id: string, code: string, name: string, description: string, codeFiche?: string | null | undefined } }> }> }> } };\n\nexport type GetTrucksQueryVariables = Exact<{\n  filter?: Maybe<TruckFilterInput>;\n}>;\n\n\nexport type GetTrucksQuery = { __typename?: 'Query', trucks: { __typename?: 'TruckResult', count: number, items: Array<{ __typename?: 'Truck', id: string, code: string, name: string }> } };\n\nexport const MaterialCheckReportFieldsFragmentDoc = gql`\n    fragment MaterialCheckReportFields on MaterialCheckReport {\n  id\n  truck {\n    id\n    name\n  }\n  user {\n    id\n    name\n  }\n  createdAt\n  type\n  status\n  statusHistory {\n    status\n    timestamp\n    user {\n      id\n      name\n    }\n  }\n  checks {\n    id\n    code\n    name\n    sections {\n      id\n      name\n      materials {\n        materialType {\n          id\n          name\n        }\n        amount\n        check\n        remark\n      }\n    }\n  }\n}\n    `;\nexport const TruckDetailFragmentFragmentDoc = gql`\n    fragment TruckDetailFragment on Truck {\n  id\n  code\n  name\n  compartments {\n    id\n    code\n    name\n    sections {\n      id\n      name\n      imageUrl\n      materials {\n        id\n        type {\n          id\n          code\n          name\n          description\n          codeFiche\n        }\n        serial\n        date\n      }\n    }\n  }\n}\n    `;\nexport const AddLogbookStatusUpdateDocument = gql`\n    mutation addLogbookStatusUpdate($logbookId: ID!, $status: HistoryStatus!) {\n  addLogbookStatusUpdate(logbookId: $logbookId, status: $status) {\n    ... on MaterialCheckReport {\n      ...MaterialCheckReportFields\n    }\n  }\n}\n    ${MaterialCheckReportFieldsFragmentDoc}`;\nexport type AddLogbookStatusUpdateMutationFn = Apollo.MutationFunction<AddLogbookStatusUpdateMutation, AddLogbookStatusUpdateMutationVariables>;\n\n/**\n * __useAddLogbookStatusUpdateMutation__\n *\n * To run a mutation, you first call `useAddLogbookStatusUpdateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddLogbookStatusUpdateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addLogbookStatusUpdateMutation, { data, loading, error }] = useAddLogbookStatusUpdateMutation({\n *   variables: {\n *      logbookId: // value for 'logbookId'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function useAddLogbookStatusUpdateMutation(baseOptions?: Apollo.MutationHookOptions<AddLogbookStatusUpdateMutation, AddLogbookStatusUpdateMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddLogbookStatusUpdateMutation, AddLogbookStatusUpdateMutationVariables>(AddLogbookStatusUpdateDocument, options);\n      }\nexport type AddLogbookStatusUpdateMutationHookResult = ReturnType<typeof useAddLogbookStatusUpdateMutation>;\nexport type AddLogbookStatusUpdateMutationResult = Apollo.MutationResult<AddLogbookStatusUpdateMutation>;\nexport type AddLogbookStatusUpdateMutationOptions = Apollo.BaseMutationOptions<AddLogbookStatusUpdateMutation, AddLogbookStatusUpdateMutationVariables>;\nexport const CreateCompartmentDocument = gql`\n    mutation CreateCompartment($truckId: ID!, $compartment: CreateCompartmentInput!) {\n  createCompartment(truckId: $truckId, compartment: $compartment) {\n    ...TruckDetailFragment\n  }\n}\n    ${TruckDetailFragmentFragmentDoc}`;\nexport type CreateCompartmentMutationFn = Apollo.MutationFunction<CreateCompartmentMutation, CreateCompartmentMutationVariables>;\n\n/**\n * __useCreateCompartmentMutation__\n *\n * To run a mutation, you first call `useCreateCompartmentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCompartmentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCompartmentMutation, { data, loading, error }] = useCreateCompartmentMutation({\n *   variables: {\n *      truckId: // value for 'truckId'\n *      compartment: // value for 'compartment'\n *   },\n * });\n */\nexport function useCreateCompartmentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCompartmentMutation, CreateCompartmentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateCompartmentMutation, CreateCompartmentMutationVariables>(CreateCompartmentDocument, options);\n      }\nexport type CreateCompartmentMutationHookResult = ReturnType<typeof useCreateCompartmentMutation>;\nexport type CreateCompartmentMutationResult = Apollo.MutationResult<CreateCompartmentMutation>;\nexport type CreateCompartmentMutationOptions = Apollo.BaseMutationOptions<CreateCompartmentMutation, CreateCompartmentMutationVariables>;\nexport const CreateMaterialCheckDocument = gql`\n    mutation CreateMaterialCheck($materialCheck: MaterialCheckReportInput!) {\n  createMaterialCheck(materialCheck: $materialCheck) {\n    id\n    truck {\n      id\n      name\n    }\n    user {\n      id\n      name\n    }\n    createdAt\n    type\n    checks {\n      id\n      code\n      name\n      sections {\n        id\n        name\n        materials {\n          materialType {\n            id\n          }\n          amount\n          check\n          remark\n        }\n      }\n    }\n  }\n}\n    `;\nexport type CreateMaterialCheckMutationFn = Apollo.MutationFunction<CreateMaterialCheckMutation, CreateMaterialCheckMutationVariables>;\n\n/**\n * __useCreateMaterialCheckMutation__\n *\n * To run a mutation, you first call `useCreateMaterialCheckMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMaterialCheckMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMaterialCheckMutation, { data, loading, error }] = useCreateMaterialCheckMutation({\n *   variables: {\n *      materialCheck: // value for 'materialCheck'\n *   },\n * });\n */\nexport function useCreateMaterialCheckMutation(baseOptions?: Apollo.MutationHookOptions<CreateMaterialCheckMutation, CreateMaterialCheckMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateMaterialCheckMutation, CreateMaterialCheckMutationVariables>(CreateMaterialCheckDocument, options);\n      }\nexport type CreateMaterialCheckMutationHookResult = ReturnType<typeof useCreateMaterialCheckMutation>;\nexport type CreateMaterialCheckMutationResult = Apollo.MutationResult<CreateMaterialCheckMutation>;\nexport type CreateMaterialCheckMutationOptions = Apollo.BaseMutationOptions<CreateMaterialCheckMutation, CreateMaterialCheckMutationVariables>;\nexport const CreateMaterialTypeDocument = gql`\n    mutation CreateMaterialType($materialType: CreateMaterialTypeInput!) {\n  createMaterialType(materialType: $materialType) {\n    id\n    code\n    name\n    description\n    codeFiche\n  }\n}\n    `;\nexport type CreateMaterialTypeMutationFn = Apollo.MutationFunction<CreateMaterialTypeMutation, CreateMaterialTypeMutationVariables>;\n\n/**\n * __useCreateMaterialTypeMutation__\n *\n * To run a mutation, you first call `useCreateMaterialTypeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMaterialTypeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMaterialTypeMutation, { data, loading, error }] = useCreateMaterialTypeMutation({\n *   variables: {\n *      materialType: // value for 'materialType'\n *   },\n * });\n */\nexport function useCreateMaterialTypeMutation(baseOptions?: Apollo.MutationHookOptions<CreateMaterialTypeMutation, CreateMaterialTypeMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateMaterialTypeMutation, CreateMaterialTypeMutationVariables>(CreateMaterialTypeDocument, options);\n      }\nexport type CreateMaterialTypeMutationHookResult = ReturnType<typeof useCreateMaterialTypeMutation>;\nexport type CreateMaterialTypeMutationResult = Apollo.MutationResult<CreateMaterialTypeMutation>;\nexport type CreateMaterialTypeMutationOptions = Apollo.BaseMutationOptions<CreateMaterialTypeMutation, CreateMaterialTypeMutationVariables>;\nexport const CreateMaterialWithTruckDocument = gql`\n    mutation CreateMaterialWithTruck($truckId: ID!, $compartmentId: ID!, $sectionId: ID!, $material: CreateMaterialInput!) {\n  createMaterialWithTruck(\n    truckId: $truckId\n    compartmentId: $compartmentId\n    sectionId: $sectionId\n    material: $material\n  ) {\n    ...TruckDetailFragment\n  }\n}\n    ${TruckDetailFragmentFragmentDoc}`;\nexport type CreateMaterialWithTruckMutationFn = Apollo.MutationFunction<CreateMaterialWithTruckMutation, CreateMaterialWithTruckMutationVariables>;\n\n/**\n * __useCreateMaterialWithTruckMutation__\n *\n * To run a mutation, you first call `useCreateMaterialWithTruckMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMaterialWithTruckMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMaterialWithTruckMutation, { data, loading, error }] = useCreateMaterialWithTruckMutation({\n *   variables: {\n *      truckId: // value for 'truckId'\n *      compartmentId: // value for 'compartmentId'\n *      sectionId: // value for 'sectionId'\n *      material: // value for 'material'\n *   },\n * });\n */\nexport function useCreateMaterialWithTruckMutation(baseOptions?: Apollo.MutationHookOptions<CreateMaterialWithTruckMutation, CreateMaterialWithTruckMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateMaterialWithTruckMutation, CreateMaterialWithTruckMutationVariables>(CreateMaterialWithTruckDocument, options);\n      }\nexport type CreateMaterialWithTruckMutationHookResult = ReturnType<typeof useCreateMaterialWithTruckMutation>;\nexport type CreateMaterialWithTruckMutationResult = Apollo.MutationResult<CreateMaterialWithTruckMutation>;\nexport type CreateMaterialWithTruckMutationOptions = Apollo.BaseMutationOptions<CreateMaterialWithTruckMutation, CreateMaterialWithTruckMutationVariables>;\nexport const CreateSectionDocument = gql`\n    mutation CreateSection($truckId: ID!, $compartmentId: ID!, $section: CreateSectionInput!) {\n  createSection(\n    truckId: $truckId\n    compartmentId: $compartmentId\n    section: $section\n  ) {\n    ...TruckDetailFragment\n  }\n}\n    ${TruckDetailFragmentFragmentDoc}`;\nexport type CreateSectionMutationFn = Apollo.MutationFunction<CreateSectionMutation, CreateSectionMutationVariables>;\n\n/**\n * __useCreateSectionMutation__\n *\n * To run a mutation, you first call `useCreateSectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSectionMutation, { data, loading, error }] = useCreateSectionMutation({\n *   variables: {\n *      truckId: // value for 'truckId'\n *      compartmentId: // value for 'compartmentId'\n *      section: // value for 'section'\n *   },\n * });\n */\nexport function useCreateSectionMutation(baseOptions?: Apollo.MutationHookOptions<CreateSectionMutation, CreateSectionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateSectionMutation, CreateSectionMutationVariables>(CreateSectionDocument, options);\n      }\nexport type CreateSectionMutationHookResult = ReturnType<typeof useCreateSectionMutation>;\nexport type CreateSectionMutationResult = Apollo.MutationResult<CreateSectionMutation>;\nexport type CreateSectionMutationOptions = Apollo.BaseMutationOptions<CreateSectionMutation, CreateSectionMutationVariables>;\nexport const GetLogbookDocument = gql`\n    query getLogbook($filter: LogbookFilterInput, $skip: Int, $limit: Int) {\n  logbook(filter: $filter, skip: $skip, limit: $limit) {\n    count\n    items {\n      ... on ProblemReport {\n        id\n        truck {\n          id\n          name\n          code\n        }\n        user {\n          id\n          name\n        }\n        createdAt\n        type\n        status\n      }\n      ... on MaterialCheckReport {\n        id\n        truck {\n          id\n          name\n          code\n        }\n        user {\n          id\n          name\n        }\n        createdAt\n        type\n        status\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetLogbookQuery__\n *\n * To run a query within a React component, call `useGetLogbookQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetLogbookQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetLogbookQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      skip: // value for 'skip'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useGetLogbookQuery(baseOptions?: Apollo.QueryHookOptions<GetLogbookQuery, GetLogbookQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetLogbookQuery, GetLogbookQueryVariables>(GetLogbookDocument, options);\n      }\nexport function useGetLogbookLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLogbookQuery, GetLogbookQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetLogbookQuery, GetLogbookQueryVariables>(GetLogbookDocument, options);\n        }\nexport type GetLogbookQueryHookResult = ReturnType<typeof useGetLogbookQuery>;\nexport type GetLogbookLazyQueryHookResult = ReturnType<typeof useGetLogbookLazyQuery>;\nexport type GetLogbookQueryResult = Apollo.QueryResult<GetLogbookQuery, GetLogbookQueryVariables>;\nexport const GetLogbookItemDocument = gql`\n    query GetLogbookItem($id: ID!) {\n  logbookItem(id: $id) {\n    __typename\n    ... on ProblemReport {\n      id\n      truck {\n        id\n        name\n        code\n      }\n      user {\n        id\n        name\n      }\n      createdAt\n      type\n      issues {\n        part\n        description\n      }\n    }\n    ... on MaterialCheckReport {\n      ...MaterialCheckReportFields\n    }\n  }\n}\n    ${MaterialCheckReportFieldsFragmentDoc}`;\n\n/**\n * __useGetLogbookItemQuery__\n *\n * To run a query within a React component, call `useGetLogbookItemQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetLogbookItemQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetLogbookItemQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetLogbookItemQuery(baseOptions: Apollo.QueryHookOptions<GetLogbookItemQuery, GetLogbookItemQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetLogbookItemQuery, GetLogbookItemQueryVariables>(GetLogbookItemDocument, options);\n      }\nexport function useGetLogbookItemLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLogbookItemQuery, GetLogbookItemQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetLogbookItemQuery, GetLogbookItemQueryVariables>(GetLogbookItemDocument, options);\n        }\nexport type GetLogbookItemQueryHookResult = ReturnType<typeof useGetLogbookItemQuery>;\nexport type GetLogbookItemLazyQueryHookResult = ReturnType<typeof useGetLogbookItemLazyQuery>;\nexport type GetLogbookItemQueryResult = Apollo.QueryResult<GetLogbookItemQuery, GetLogbookItemQueryVariables>;\nexport const GetMaterialTypesDocument = gql`\n    query getMaterialTypes {\n  materialTypes(filter: {}) {\n    count\n    items {\n      id\n      code\n      name\n      description\n      codeFiche\n    }\n  }\n}\n    `;\n\n/**\n * __useGetMaterialTypesQuery__\n *\n * To run a query within a React component, call `useGetMaterialTypesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMaterialTypesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMaterialTypesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMaterialTypesQuery(baseOptions?: Apollo.QueryHookOptions<GetMaterialTypesQuery, GetMaterialTypesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetMaterialTypesQuery, GetMaterialTypesQueryVariables>(GetMaterialTypesDocument, options);\n      }\nexport function useGetMaterialTypesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMaterialTypesQuery, GetMaterialTypesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetMaterialTypesQuery, GetMaterialTypesQueryVariables>(GetMaterialTypesDocument, options);\n        }\nexport type GetMaterialTypesQueryHookResult = ReturnType<typeof useGetMaterialTypesQuery>;\nexport type GetMaterialTypesLazyQueryHookResult = ReturnType<typeof useGetMaterialTypesLazyQuery>;\nexport type GetMaterialTypesQueryResult = Apollo.QueryResult<GetMaterialTypesQuery, GetMaterialTypesQueryVariables>;\nexport const GetTruckDocument = gql`\n    query GetTruck($id: ID!) {\n  truck(id: $id) {\n    ...TruckDetailFragment\n  }\n}\n    ${TruckDetailFragmentFragmentDoc}`;\n\n/**\n * __useGetTruckQuery__\n *\n * To run a query within a React component, call `useGetTruckQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTruckQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTruckQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetTruckQuery(baseOptions: Apollo.QueryHookOptions<GetTruckQuery, GetTruckQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetTruckQuery, GetTruckQueryVariables>(GetTruckDocument, options);\n      }\nexport function useGetTruckLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTruckQuery, GetTruckQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetTruckQuery, GetTruckQueryVariables>(GetTruckDocument, options);\n        }\nexport type GetTruckQueryHookResult = ReturnType<typeof useGetTruckQuery>;\nexport type GetTruckLazyQueryHookResult = ReturnType<typeof useGetTruckLazyQuery>;\nexport type GetTruckQueryResult = Apollo.QueryResult<GetTruckQuery, GetTruckQueryVariables>;\nexport const GetTrucksDocument = gql`\n    query GetTrucks($filter: TruckFilterInput) {\n  trucks(filter: $filter) {\n    count\n    items {\n      id\n      code\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useGetTrucksQuery__\n *\n * To run a query within a React component, call `useGetTrucksQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTrucksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTrucksQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function useGetTrucksQuery(baseOptions?: Apollo.QueryHookOptions<GetTrucksQuery, GetTrucksQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetTrucksQuery, GetTrucksQueryVariables>(GetTrucksDocument, options);\n      }\nexport function useGetTrucksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTrucksQuery, GetTrucksQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetTrucksQuery, GetTrucksQueryVariables>(GetTrucksDocument, options);\n        }\nexport type GetTrucksQueryHookResult = ReturnType<typeof useGetTrucksQuery>;\nexport type GetTrucksLazyQueryHookResult = ReturnType<typeof useGetTrucksLazyQuery>;\nexport type GetTrucksQueryResult = Apollo.QueryResult<GetTrucksQuery, GetTrucksQueryVariables>;","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Footer } from \"antd/lib/layout/layout\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface Props {\n\n}\n\nconst AppFooter: React.FC<Props> = () => {\n  const { t } = useTranslation();\n\n  return (\n    <Footer className=\"no-print\" style={{ textAlign: \"center\" }}>{t(\"footer.mainText\")}</Footer>\n  );\n};\n\nexport default AppFooter;","import { CarOutlined, ToolOutlined, BookOutlined } from \"@ant-design/icons\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./styles.scss\";\n\ninterface Props {\n  onUrlChange: () => void;\n}\n\nconst items: { text: string; icon: any; url: string }[] = [\n  { text: \"navigation.trucks\", icon: CarOutlined, url: \"/trucks\" },\n  { text: \"navigation.materials\", icon: ToolOutlined, url: \"/materials\" },\n  { text: \"navigation.logbook\", icon: BookOutlined, url: \"/logbook\" },\n];\n\nconst SideNavigation: React.FC<Props> = ({ onUrlChange }) => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"sideNavigation\">\n      {items.map((item, i) => (\n        <NavLink to={item.url} activeClassName=\"navigationElement__active\" key={i} className=\"navigationElement\" onClick={onUrlChange}>\n          {React.createElement(item.icon)}\n          {t(item.text)}\n        </NavLink>\n      ))}\n    </div>\n  );\n};\n\nexport default SideNavigation;","import { DownOutlined, InfoCircleOutlined, LogoutOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { AdminPortal, useAuthUser } from \"@frontegg/react\";\nimport { Avatar, Dropdown, Menu } from \"antd\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport \"./styles.scss\";\n\ninterface Props {\n}\n\nconst UserDropdown: React.FC<Props> = () => {\n  const { t } = useTranslation();\n  const user = useAuthUser();\n\n  const onSettingsClick = () => {\n    AdminPortal.show();\n  };\n\n  const userMenu = (\n    <Menu>\n      <Menu.Item icon={<SettingOutlined />} onClick={onSettingsClick}>\n        {t(\"navigation.settings\")}\n      </Menu.Item>\n      <Menu.Item icon={<InfoCircleOutlined />}>\n        <Link to=\"/about\">{t(\"navigation.about\")}</Link>\n      </Menu.Item>\n      <Menu.Item icon={<LogoutOutlined />}>\n        <Link to=\"/account/logout\">{t(\"navigation.logout\")}</Link>\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <Dropdown overlay={userMenu}>\n      <div className='userContent'>\n        <Avatar src={user.profilePictureUrl} />\n        <span className='userContent__name'>{ user.name }</span>\n        <DownOutlined />\n      </div>\n    </Dropdown>\n  );\n};\n\nexport default UserDropdown;","import { MenuFoldOutlined, MenuUnfoldOutlined } from \"@ant-design/icons\";\nimport { Header } from \"antd/lib/layout/layout\";\nimport React from \"react\";\nimport UserDropdown from \"./components/userDropdown/userDropdown\";\nimport \"./styles.scss\";\n\ninterface Props {\n  hasBroken: boolean;\n  collapsed: boolean;\n  setCollapsed: (collapsed: boolean) => void;\n}\n\nconst AppHeader: React.FC<Props> = ({ hasBroken, collapsed, setCollapsed}) => {\n  return (\n    <Header className='appHeader'>\n      <div>\n        {hasBroken && React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n          className: \"trigger\",\n          onClick: () => { setCollapsed(!collapsed); },\n        })}\n      </div>\n      \n\n      <UserDropdown></UserDropdown>\n    </Header>\n  );\n};\n\nexport default AppHeader;","import { InfoCircleOutlined } from \"@ant-design/icons\";\nimport { Alert, Tooltip } from \"antd\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./styles.scss\";\n\ninterface Props {\n  message?: string;\n}\n\nconst ErrorMessage: React.FC<Props> = ({ message }) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <Alert className=\"errorMessage\"\n        message={ t(\"errors.somethingWentWrong\")}\n        showIcon\n        type=\"error\"\n        action={\n          message && (\n            <Tooltip placement=\"bottom\" title={message}>\n              <InfoCircleOutlined />\n            </Tooltip>\n          )\n        }\n      />\n    </>\n  );\n};\n\nexport default ErrorMessage;","export default __webpack_public_path__ + \"static/media/loading.21c57853.gif\";","import * as React from \"react\";\nimport \"./styles.scss\";\nimport Gif from \"./loading.gif\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface Props {\n}\n\nconst className = \"LoadingOverview\";\n\nconst Loading: React.FC<Props> = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className={className}>\n      <img src={Gif as any} alt='Loading Animation' width={75} />\n      <h3>{t(\"loading\")}</h3>\n    </div>\n  );\n};\n\nexport default Loading;","import Loading from \"./loading\";\n\nconst LoadingContainer = () => {\n  return <Loading />;\n};\n\nexport default LoadingContainer;","import { Card, Checkbox, Col, Form, FormInstance, Row } from \"antd\";\nimport { FormListFieldData } from \"antd/lib/form/FormList\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Compartment, CompartmentCheckInput, Material, MaterialCheckInput, Section, SectionCheckInput, useGetTruckQuery } from \"graphql/schema\";\nimport ErrorMessage from \"components/errorMessage/errorMessage\";\nimport Loading from \"components/loader/loading\";\nimport \"./styles.scss\";\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst _ = require(\"lodash\");\n\ninterface Props {\n  truckId: string;\n  form: FormInstance;\n}\n\nconst sort = (array: Compartment[]): Compartment[] => {\n  return [...array].sort((a, b) => a.code > b.code ? 1 : -1);\n};\n\nconst MaterialCheckForm: React.FC<Props> = ({ truckId }) => {\n  const { t } = useTranslation();\n  const { data, error, loading } = useGetTruckQuery({\n    variables: { id: truckId },\n  });\n\n  const mapMaterials = (materials: Material[]): MaterialCheckInput[] => {\n    const grouped = _.groupBy(materials, \"type.id\");\n    return Object.keys(grouped).map(key => ({\n      materialTypeId: key,\n      amount: grouped[key].length,\n      check: false\n    }));\n  };\n\n  const mapMaterialForm = (compartments: Compartment[]): CompartmentCheckInput[] => {\n    return sort(compartments).map(c => ({\n      id: c.id,\n      code: c.code,\n      name: c.name,\n      sections: c.sections.map((s) => ({\n        id: s.id || \"\",\n        name: s.name || \"\",\n        materials: mapMaterials(s.materials)\n      }))\n    }));\n  };\n\n  const getSection = (compartmentId: string, sectionId: string): Section => {\n    return data?.truck.compartments.find(c => c.id === compartmentId)?.sections.find(s => s.id === sectionId) as Section;\n  };\n\n  const getMaterialTypeName = (section: Section, materialTypeId: string): string => {\n    return section.materials.find(m => m.type.id === materialTypeId)?.type.name || \"\";\n  };\n\n  const renderCompartment = (field: FormListFieldData, comparmentForm: CompartmentCheckInput) => {\n    return (\n      <Card key={field.fieldKey} className=\"compartment\">\n        <h1>{comparmentForm.name}</h1>\n\n        <Form.List name={[field.name, \"sections\"]} initialValue={comparmentForm.sections}>\n          {(fields) => (\n            <>\n              {fields.map(section => (\n                renderSection(section, comparmentForm.sections[section.key], getSection(comparmentForm.id, comparmentForm.sections[section.key].id))\n              ))}\n            </>\n          )}\n        </Form.List>\n      </Card>\n    );\n  };\n\n  const renderSection = (field: FormListFieldData, sectionForm: SectionCheckInput, section: Section) => {\n    return (\n      <section key={field.key}>\n        <h2>{sectionForm.name}</h2>\n        <Row gutter={[16, 16]}>\n          <Col span={18}>\n            <Form.List name={[field.name, \"materials\"]} initialValue={sectionForm.materials}>\n              {(fields) => (\n                <>\n                  {fields.map(material => (\n                    sectionForm?.materials && renderMaterial(material, sectionForm.materials[material.key], getMaterialTypeName(section, sectionForm.materials[material.key].materialTypeId))\n                  ))}\n                </>\n              )}\n            </Form.List>\n          </Col>\n          <Col span={6}>\n            {section.imageUrl ?\n              <img src={section.imageUrl} alt={`Section ${section.name}`} className=\"sectionImg\" /> :\n              <p>{t(\"truckDetail.noImage\")}</p>}\n          </Col>\n        </Row>\n      </section>\n    );\n  };\n\n  const renderMaterial = (field: FormListFieldData, materialForm: MaterialCheckInput, materialTypeName: string) => {\n    return (\n      <div key={field.fieldKey}>\n        <Row>\n          <Col span={18}><p>{materialTypeName}</p></Col>\n          <Col span={3}><p>{materialForm.amount}</p></Col>\n          <Col span={3}>\n            <Form.Item\n              {...field}\n              name={[field.name, \"check\"]}\n              fieldKey={[field.fieldKey, \"check\"]}\n              valuePropName=\"checked\"\n            >\n              <Checkbox />\n            </Form.Item>\n          </Col>\n        </Row>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return <Loading></Loading>;\n  }\n\n  if (error || !data) {\n    return <ErrorMessage message={error?.message}></ErrorMessage>;\n  }\n\n  return (\n    <Form.List name=\"checks\" initialValue={mapMaterialForm(data.truck.compartments)}>\n      {(comparments) => (\n        <>\n          {comparments.map(field => renderCompartment(field, mapMaterialForm(data.truck.compartments)[field.key]))}\n        </>\n      )}\n    </Form.List>\n  );\n};\n\nexport default MaterialCheckForm;","import { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Col, Form, Input, Row, Space } from \"antd\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./styles.scss\";\n\ninterface Props {\n}\n\nconst ProblemReportForm: React.FC<Props> = () => {\n  const { t } = useTranslation();\n\n  return (\n    <Row>\n      <Form.List name=\"issues\">\n        {(fields, { add, remove }) => (\n          <>\n            {fields.map(field => (\n              <Col span={12} offset={6} key={field.fieldKey}>\n                <Space align=\"baseline\">\n                  <Form.Item\n                    {...field}\n                    label=\"Part\"\n                    name={[field.name, \"part\"]}\n                    fieldKey={[field.fieldKey, \"part\"]}\n                    rules={[{ required: true, message: \"This field is required\" }]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  <Form.Item\n                    {...field}\n                    label=\"Description\"\n                    name={[field.name, \"description\"]}\n                    fieldKey={[field.fieldKey, \"description\"]}\n                    rules={[{ required: true, message: \"This field is required\" }]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  <MinusCircleOutlined onClick={() => remove(field.name)} />\n                </Space>\n              </Col>\n            ))}\n\n            <Col span={12} offset={6}>\n              <Form.Item>\n                <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\n                  { t(\"problemReportForm.addProblem\")}\n                </Button>\n              </Form.Item>\n            </Col>\n          </>\n        )}\n      </Form.List>\n    </Row>\n  );\n};\n\nexport default ProblemReportForm;","import { gql } from \"@apollo/client\";\n\nexport const MUTATION_CREATE_MATERIAL_CHECK = gql`\n  mutation CreateMaterialCheck(\n    $materialCheck: MaterialCheckReportInput!\n  ) {\n    createMaterialCheck(\n      materialCheck: $materialCheck\n    ) {\n      id\n      truck {\n        id\n        name\n      }\n      user { id, name }\n      createdAt\n      type\n      checks {\n        id\n        code\n        name\n        sections {\n          id\n          name\n          materials {\n            materialType {\n              id\n            }\n            amount\n            check\n            remark\n          }\n        }\n      }\n    }\n  }\n`;\n","import { useMutation } from \"@apollo/client\";\nimport { Button, Col, Form, Row, Select } from \"antd\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport { GetTrucksQuery, LogBookItemType } from \"graphql/schema\";\nimport ErrorMessage from \"../errorMessage/errorMessage\";\nimport MaterialCheckForm from \"./components/materialCheckForm/materialCheckForm\";\nimport ProblemReportForm from \"./components/problemReportForm/problemReportForm\";\nimport \"./styles.scss\";\nimport { MUTATION_CREATE_MATERIAL_CHECK } from \"graphql/mutations/createMaterialCheck\";\n\nconst { Option } = Select;\n\ninterface Props {\n  trucks: GetTrucksQuery;\n  type?: string;\n}\nconst className = \"AddLogbookItem\";\n\nconst AddLogbookItem: React.FC<Props> = ({ trucks, type = LogBookItemType.MaterialCheck }) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const [selectedTruckId, setSelectedTruckId] = React.useState<string>();\n  const [graphqlError, setGraphqlError] = React.useState<string>();\n  const [creatematerialCheck] = useMutation(MUTATION_CREATE_MATERIAL_CHECK);\n  const [form] = Form.useForm();\n\n  const onFinish = async (values: any) => {\n    if (type === LogBookItemType.MaterialCheck) {\n      try {\n        const result = await creatematerialCheck({\n          variables: {\n            materialCheck: values\n          }\n        });\n\n        if (result.data) {\n          form.resetFields();\n          history.push(`/logbook/${result.data.createMaterialCheck.id}`);\n        }\n      } catch (error: any) {\n        setGraphqlError(error.message);\n      }\n    }\n  };\n\n  const onChange = (value: string) => {\n    setSelectedTruckId(value);\n  };\n\n  return (\n    <div className={className}>\n      {graphqlError && (\n        <ErrorMessage message={graphqlError}></ErrorMessage>\n      )}\n\n      <div className=\"pageHeader\">\n        <h1>{t(`addLogbookItem.${type.toLowerCase()}.title`)}</h1>\n      </div>\n\n      <Form\n        form={form}\n        onFinish={onFinish}\n        autoComplete=\"off\"\n        requiredMark={\"optional\"}\n      >\n        <Row gutter={[16, 16]}>\n          <Col span={12} offset={6}>\n            <Form.Item name=\"truckId\" rules={[{ required: true, message: \"This field is required\" }]}>\n              <Select\n                showSearch\n                style={{ width: \"100%\" }}\n                placeholder={t(\"problemReportForm.truck.placeholder\")}\n                filterOption={(input: any, option: any) =>\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                }\n                onChange={onChange}\n              >\n                {trucks && trucks?.trucks?.items && trucks?.trucks?.items.map((truck) => <Option value={truck.id} key={truck.id}>{truck.code} - {truck.name}</Option>)}\n              </Select>\n            </Form.Item>\n          </Col>\n        </Row>\n\n        {type === LogBookItemType.ProblemReport && (\n          <ProblemReportForm></ProblemReportForm>\n        )}\n\n        {type === LogBookItemType.MaterialCheck && selectedTruckId && (\n          <MaterialCheckForm truckId={selectedTruckId} form={form}></MaterialCheckForm>\n        )}\n      </Form>\n\n      <Button type=\"primary\" onClick={form.submit}>\n        {t(\"problemReportForm.save\")}\n      </Button>\n    </div>\n  );\n};\n\nexport default AddLogbookItem;","import { useGetTrucksQuery } from \"graphql/schema\";\nimport React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport ErrorMessage from \"../errorMessage/errorMessage\";\nimport LoadingContainer from \"../loader\";\nimport AddLogbookItem from \"./addLogbookItem\";\n\nconst useQuery = () => {\n  const { search } = useLocation();\n\n  return React.useMemo(() => new URLSearchParams(search), [search]);\n};\n\nconst AddLogbookItemContainer = () => {\n  const { data, error, loading } = useGetTrucksQuery();\n  const query = useQuery();\n\n  if (loading) {\n    return <LoadingContainer></LoadingContainer>;\n  }\n\n  if (error || !data) {\n    return <ErrorMessage message={error?.message}></ErrorMessage>;\n  }\n\n  return <AddLogbookItem trucks={data} type={query.get(\"type\") || undefined} />;\n};\n\nexport default AddLogbookItemContainer;","import { Table } from \"antd\";\nimport * as React from \"react\";\nimport \"./styles.scss\";\n\ninterface Props {\n  dataSource: any[];\n  columns: any;\n  pagination: boolean;\n  showHeader?: boolean;\n  onRow?: any;\n}\n\nconst AppTable: React.FC<Props> = ({ dataSource, columns, pagination, showHeader,  onRow }) => {\n  return (\n    <Table\n      dataSource={dataSource}\n      columns={columns}\n      pagination={pagination ? { position: [\"bottomRight\"] } : false}\n      showHeader={showHeader}\n      onRow={onRow}\n    />\n  );\n};\n\nexport default AppTable;","import { gql } from \"@apollo/client\";\n\nexport const MATERIAL_CHECK_REPORT_FIELDS = gql`\n  fragment MaterialCheckReportFields on MaterialCheckReport {\n    id\n    truck {\n      id\n      name\n    }\n    user {\n      id\n      name\n    }\n    createdAt\n    type\n    status\n    statusHistory {\n      status\n      timestamp\n      user {\n        id\n        name\n      }\n    }\n    checks {\n      id\n      code\n      name\n      sections {\n        id\n        name\n        materials {\n          materialType {\n            id\n            name\n          }\n          amount\n          check\n          remark\n        }\n      }\n    }\n  }\n`;\n","import { gql } from \"@apollo/client\";\nimport { MATERIAL_CHECK_REPORT_FIELDS } from \"graphql/fragments/materialCheckReportFields\";\n\nexport const ADD_MATERIALCHECK_UPDATE = gql`\n  ${MATERIAL_CHECK_REPORT_FIELDS}\n  mutation addLogbookStatusUpdate($logbookId: ID!, $status: HistoryStatus!) {\n    addLogbookStatusUpdate(logbookId: $logbookId, status: $status) {\n      ... on MaterialCheckReport {\n        ... MaterialCheckReportFields\n      }\n    }\n  }\n`;\n","import { CheckCircleFilled, CloseCircleFilled } from \"@ant-design/icons\";\nimport { Card, Tabs, Timeline, Form, Select, Button, Divider } from \"antd\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { CompartmentCheck, HistoryStatus, MaterialCheck, SectionCheck, StatusHistoryItem } from \"graphql/schema\";\nimport \"./styles.scss\";\nimport Moment from \"react-moment\";\nimport { useMutation } from \"@apollo/client\";\nimport AppTable from \"components/appTable/appTable\";\nimport { ADD_MATERIALCHECK_UPDATE } from \"graphql/mutations/addLogbookStatusUpdate\";\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\ninterface Props {\n  id: string;\n  materialChecks: CompartmentCheck[];\n  history: StatusHistoryItem[];\n}\n\nconst sort = (array: any[]): any[] => {\n  return [...array].sort((a, b) => a.code > b.code ? 1 : -1);\n};\n\nconst columns = [\n  {\n    title: \"Material\",\n    dataIndex: \"materialTypeName\",\n    key: \"materialTypeName\",\n  },\n  {\n    title: \"Amount\",\n    dataIndex: \"amount\",\n    key: \"amount\",\n  },\n  {\n    title: \"Check\",\n    dataIndex: \"check\",\n    key: \"check\",\n    render: (check: boolean) => {\n      return check ?\n        <CheckCircleFilled className=\"successIcon\" /> :\n        <CloseCircleFilled className=\"errorIcon\" />;\n    }\n  },\n];\n\nconst MaterialCheckReport: React.FC<Props> = ({ id, materialChecks, history }) => {\n  const { t } = useTranslation();\n  const [addMaterialCheckUpdate] = useMutation(ADD_MATERIALCHECK_UPDATE);\n  const [form] = Form.useForm();\n\n  const renderCompartment = (compartment: CompartmentCheck) => (compartment && compartment.id &&\n    <Card key={\"comparment_\" + compartment.id} className=\"compartment\">\n      <h2>{compartment.name}</h2>\n\n      {compartment.sections && compartment.sections.length ?\n        compartment.sections.map((section) => renderSection(section)) :\n        <div>{t(\"truckDetail.noSection\")}</div>}\n    </Card>);\n\n  const renderSection = (section: SectionCheck) => {\n    return (section && section.id &&\n      <div key={\"section_\" + section.id} className=\"section\">\n        <h3>{section.name}</h3>\n\n        <AppTable\n          dataSource={section.materials.map(m => ({ materialTypeName: m.materialType.name, amount: m.amount, check: m.check }))}\n          columns={columns}\n          pagination={false}\n          showHeader={false}\n        />\n      </div>);\n  };\n\n  const renderHistoryItem = (historyItem: StatusHistoryItem) => {\n    return (\n      <Timeline.Item>\n        <p className='timeLineTitle'>{historyItem.status}</p>\n        <p>{historyItem.user.name} op <Moment format=\"HH:mm:ss\">{historyItem.timestamp}</Moment></p>\n      </Timeline.Item>\n    );\n  };\n\n  const onFinish = async (values: any) => {\n    await addMaterialCheckUpdate({\n      variables: {\n        logbookId: id,\n        status: values.status\n      }\n    });\n\n    form.resetFields();\n  };\n\n  const renderRecap = (compartments: CompartmentCheck[]) => {\n    const materials: MaterialCheck[] = [];\n    compartments.forEach(compartment => {\n      compartment.sections.forEach(section => {\n        section.materials.forEach(material => {\n          if (!material.check) {\n            materials.push(material);\n          }\n        });\n      });\n    });\n\n    return (\n      <AppTable\n        dataSource={materials.map(m => ({ materialTypeName: m.materialType.name, amount: m.amount, check: m.check }))}\n        columns={columns}\n        pagination={false}\n        showHeader={false}\n      />\n    );\n  };\n\n  return (\n    <Tabs defaultActiveKey=\"1\">\n      <TabPane tab=\"Overview\" key=\"1\">\n        <Timeline>\n          {history?.map((historyItem) => renderHistoryItem(historyItem))}\n          <Timeline.Item>\n            <Form\n              form={form}\n              onFinish={onFinish}\n              autoComplete=\"off\"\n              requiredMark={\"optional\"}\n            >\n              <div>\n                <Form.Item\n                  label=\"Status\"\n                  name=\"status\"\n                  rules={[{ required: true, message: \"This field is required\" }]}\n                >\n                  <Select\n                    showSearch\n                    \n                    filterOption={(input: any, option: any) =>\n                      option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                  >\n                    {Object.keys(HistoryStatus).map((status) => <Option value={status.toUpperCase()} key={status}>{status}</Option>)}\n                  </Select>\n                </Form.Item>\n                <Button type=\"primary\" onClick={form.submit}>\n                  {t(\"problemReportForm.save\")}\n                </Button>\n              </div>\n            </Form>\n          </Timeline.Item>\n        </Timeline>\n\n        <Divider></Divider>\n\n        <h3>{t(\"logbookItemDetail.material_check.recap\")}</h3>\n\n        { renderRecap(materialChecks) }\n      </TabPane>\n      <TabPane tab=\"Detail\" key=\"2\">\n        {sort(materialChecks).map((compartment) => renderCompartment(compartment))}\n      </TabPane>\n    </Tabs>\n  );\n};\n\nexport default MaterialCheckReport;","import * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { LogbookItem, LogBookItemType, MaterialCheckReport as MaterialCheckReportType } from \"graphql/schema\";\nimport MaterialCheckReport from \"./components/materialCheckReport/materialCheckReport\";\nimport \"./styles.scss\";\n\ninterface Props {\n  logbookItem: LogbookItem;\n}\nconst className = \"LogbookItemDetail\";\n\nconst LogbookItemDetail: React.FC<Props> = ({ logbookItem }) => {\n  const { t } = useTranslation();\n\n  return (\n    <div className={className}>\n      <div className=\"pageHeader\">\n        <h1>{t(`logbookItemDetail.${logbookItem.type.toLowerCase()}.title`)}</h1>\n      </div>\n\n      <h2>{ logbookItem.truck.name }</h2>\n\n      {logbookItem.type === LogBookItemType.ProblemReport && (\n        <h1>PROBLEM</h1>\n      )}\n\n      {logbookItem.type === LogBookItemType.MaterialCheck && (\n        <MaterialCheckReport id={logbookItem.id} materialChecks={(logbookItem as MaterialCheckReportType).checks} history={logbookItem.statusHistory}/>\n      )}\n    </div>\n  );\n};\n\nexport default LogbookItemDetail;","import { useParams } from \"react-router-dom\";\nimport ErrorMessage from \"components/errorMessage/errorMessage\";\nimport LoadingContainer from \"components/loader\";\nimport LogbookItemDetail from \"./logbookDetail\";\nimport { LogbookItem, useGetLogbookItemQuery } from \"graphql/schema\";\n\nconst LogbookItemDetailContainer = () => {\n  const { id } = useParams<{ id: string }>();\n  const { data, error, loading } = useGetLogbookItemQuery({ variables: { id }});\n\n  if (loading) {\n    return <LoadingContainer></LoadingContainer>;\n  }\n\n  if (error || !data) {\n    return <ErrorMessage message={error?.message}></ErrorMessage>;\n  }\n\n  return <LogbookItemDetail logbookItem={data.logbookItem as LogbookItem} />;\n};\n\nexport default LogbookItemDetailContainer;","import * as React from \"react\";\nimport \"./styles.scss\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface Props {\n  value: string\n}\n\n\nconst Translated: React.FC<Props> = ({ value }) => {\n  const { t } = useTranslation();\n\n  return (\n    <span>{ t(value) }</span>\n  );\n};\n\nexport default Translated;","import { ControlOutlined, WarningOutlined } from \"@ant-design/icons\";\nimport { Button, Card, Col, Modal, Row } from \"antd\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { LogBookItemType } from \"graphql/schema\";\nimport Translated from \"components/translated/translated\";\nimport \"./styles.scss\";\n\ninterface Props {\n}\n\nconst AddLogbookItemModal: React.FC<Props> = () => {\n  const { t } = useTranslation();\n  const [isModalVisible, setIsModalVisible] = React.useState(false);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const hideModal = () => {\n    setIsModalVisible(false);\n  };\n\n\n  return (\n    <>\n      <Button type=\"primary\" onClick={showModal}>\n        {t(\"addLogbookItemModal.openBtn\")}\n      </Button>\n      <Modal title={t(\"addLogbookItemModal.title\")} visible={isModalVisible} onCancel={hideModal} cancelText={t(\"btn.cancel\")} okButtonProps={{ hidden: true }}>\n        <Row>\n          <Col span={12}>\n            <Link to={`/logbook/new?type=${LogBookItemType.ProblemReport}`}>\n              <Card\n                className=\"iconCard\"\n                hoverable\n                cover={<WarningOutlined />}\n              >\n                <h2><Translated value={\"logbookItemType.\" + LogBookItemType.ProblemReport.toLowerCase()} /></h2>\n              </Card>\n            </Link>\n          </Col>\n          <Col span={12}>\n            <Link to={`/logbook/new?type=${LogBookItemType.MaterialCheck}`}>\n              <Card\n                className=\"iconCard\"\n                hoverable\n                cover={<ControlOutlined />}\n              >\n                <h2><Translated value={\"logbookItemType.\" + LogBookItemType.MaterialCheck.toLowerCase()} /></h2>\n              </Card>\n            </Link>\n          </Col>\n        </Row>\n      </Modal>\n    </>\n  );\n};\n\nexport default AddLogbookItemModal;","import { WarningOutlined, ControlOutlined } from \"@ant-design/icons\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport AppTable from \"components/appTable/appTable\";\nimport Translated from \"components/translated/translated\";\nimport { LogbookItem, LogBookItemType } from \"graphql/schema\";\nimport * as React from \"react\";\nimport Moment from \"react-moment\";\nimport \"./styles.scss\";\n\ninterface Props {\n  data: LogbookItem[],\n  onClick: (id: string) => void\n}\n\ninterface TableItem {\n  id: string;\n  type: string;\n  truck: string;\n  user: string;\n  createdAt: string;\n}\n\nconst columns: ColumnsType<TableItem> = [\n  {\n    title: <Translated value={\"logbookItems.type\"} />,\n    dataIndex: \"type\",\n    key: \"type\",\n    render: (value: LogBookItemType) => {\n      if (value === LogBookItemType.ProblemReport) {\n        return (<span><WarningOutlined /> <Translated value={\"logbookItemType.\" + value.toLowerCase()} /></span>);\n      } else if (value === LogBookItemType.MaterialCheck) {\n        return (<span><ControlOutlined /> <Translated value={\"logbookItemType.\" + value.toLowerCase()} /></span>);\n      } else {\n        return (<span><Translated value={\"logbookItemType.\" + value} /></span>);\n      }\n    }\n  },\n  {\n    title: <Translated value={\"logbookItems.truck\"} />,\n    dataIndex: \"truck\",\n    key: \"truck\",\n  },\n  {\n    title: <Translated value={\"logbookItems.user\"} />,\n    dataIndex: \"user\",\n    key: \"user\",\n  },\n  {\n    title: <Translated value={\"logbookItems.status\"} />,\n    dataIndex: \"status\",\n    key: \"status\",\n    render: (value) => {\n      return <Translated value={`historyStatus.${value?.toLowerCase()}`} />;\n    }\n  },\n  {\n    title: <Translated value={\"logbookItems.createdAt\"} />,\n    dataIndex: \"createdAt\",\n    key: \"createdAt\",\n    render: (value) => {\n      return <Moment format=\"DD-MM-YYYY HH:mm:ss\">{value}</Moment>;\n    }\n  }\n];\n\nconst LogbookList: React.FC<Props> = ({ data, onClick }) => {\n  const dataSource: any = data.map(logbook => ({\n    key: logbook.id,\n    id: logbook.id,\n    type: logbook.type,\n    truck: `(${logbook.truck.code}) ${logbook.truck.name}`,\n    user: logbook.user.name,\n    status: logbook.status,\n    createdAt: logbook.createdAt,\n  }) || []);\n\n  return (\n    <AppTable\n      dataSource={dataSource}\n      columns={columns}\n      pagination={false}\n      onRow={(record: TableItem) => {\n        return {\n          onClick: () => { onClick(record.id); }\n        };\n      }}\n    />\n  );\n};\n\nexport default LogbookList;","import { Select } from \"antd\";\nimport { Truck, useGetTrucksQuery } from \"graphql/schema\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./styles.scss\";\n\nconst { Option } = Select;\n\ninterface Props {\n  onChange?: (ids: string[]) => void\n}\n\nconst TruckSelector: React.FC<Props> = ({ onChange }) => {\n  const { t } = useTranslation();\n  const { data, loading } = useGetTrucksQuery();\n\n  const renderOption = (truck: Partial<Truck>, index: number) => {\n    return <Option value={truck.id || \"\"} key={`truckSelector-${index}`}>{truck.code} {truck.name}</Option>;\n  };\n\n  return (\n    <Select\n      loading={loading}\n      placeholder={t(\"truckselector.placeholder\")}\n      mode=\"multiple\"\n      style={{minWidth: 200}}\n      filterOption={(input, option) => option?.children?.some((value: string) => value.toLowerCase().includes(input.toLowerCase()))}\n      onChange={onChange}\n    >\n      { data && data?.trucks.items.length && data?.trucks.items.map(renderOption)}\n    </Select>\n  );\n};\n\nexport default TruckSelector;","import { DatePicker, Form, Select } from \"antd\";\nimport TruckSelector from \"components/truckSelector/truckSelector\";\nimport { HistoryStatus, LogbookFilterInput, LogBookItemType } from \"graphql/schema\";\nimport { Moment } from \"moment\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./styles.scss\";\n\nconst { RangePicker } = DatePicker;\nconst { Option } = Select;\n\ninterface Props {\n  onChange: (filters: LogbookFilterInput) => void\n}\n\nconst LogbookFilter: React.FC<Props> = ({ onChange }) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n\n  const onValuesChange = (values: any, info: { truckIds: string[]; date: Moment[], status: HistoryStatus[], types: LogBookItemType[]}) => {\n    onChange({\n      truckIds: info.truckIds,\n      from: info.date && info.date[0]?.toISOString(),\n      to: info.date && info.date[1]?.toISOString(),\n      status: info.status,\n      types: info.types,\n    });\n  };\n\n  return (\n    <section className=\"logbook-filter\">\n      <Form\n        className=\"filter-form\"\n        layout=\"vertical\"\n        form={form}\n        onValuesChange={onValuesChange}\n      >\n        <Form.Item label={t(\"logbookOverview.truck\")} name=\"truckIds\">\n          <TruckSelector />\n        </Form.Item>\n\n        <Form.Item label={t(\"logbookOverview.period\")} name=\"date\">\n          <RangePicker />\n        </Form.Item>\n\n        <Form.Item label={t(\"logbookOverview.status\")} name=\"status\">\n          <Select mode=\"multiple\" placeholder={t(\"logbookOverview.status\")} style={{minWidth: 200}}>\n            { Object.values(HistoryStatus).map(status => {\n              return (<Option value={status} key={status}>{t(`historyStatus.${status.toLowerCase()}`)}</Option>);\n            }) }\n          </Select>\n        </Form.Item>\n\n        <Form.Item label={t(\"logbookOverview.types\")} name=\"types\">\n          <Select mode=\"multiple\" placeholder={t(\"logbookOverview.types\")} style={{minWidth: 200}}>\n            { Object.values(LogBookItemType).map(type => {\n              return (<Option value={type} key={type}>{t(`logbookItemType.${type.toLowerCase()}`)}</Option>);\n            }) }\n          </Select>\n        </Form.Item>\n      </Form>\n    </section>\n  );\n};\n\nexport default LogbookFilter;","import * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./styles.scss\";\nimport AddLogbookItemModal from \"./components/addLogbookItemModal/addLogbookItemModal\";\nimport { useHistory } from \"react-router-dom\";\nimport LogbookList from \"components/logbookList/logbookList\";\nimport LogbookFilter from \"./components/logbookFilter/logbookFilter\";\nimport { LogbookFilterInput, LogbookItem } from \"graphql/schema\";\n\ninterface Props {\n  data: LogbookItem[];\n  onFilterChange: (filters: LogbookFilterInput) => void;\n}\n\nconst className = \"LogbookOverview\";\n\nconst LogbookOverview: React.FC<Props> = ({ data, onFilterChange }) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n\n  const goToDetail = (id: string) => {\n    history.push(`/logbook/${id}`);\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"page-header\">\n        <h1>{t(\"logbookOverview.title\")}</h1>\n        <AddLogbookItemModal></AddLogbookItemModal>\n      </div>\n\n      <LogbookFilter onChange={onFilterChange}></LogbookFilter>\n\n      <LogbookList\n        data={data}\n        onClick={goToDetail}\n      />\n    </div>\n  );\n};\n\nexport default LogbookOverview;","import ErrorMessage from \"components/errorMessage/errorMessage\";\nimport LoadingContainer from \"components/loader\";\nimport { LogbookFilterInput, LogbookItem, useGetLogbookQuery } from \"graphql/schema\";\nimport LogbookOverview from \"./logbookOverview\";\n\nconst LogbookOverviewContainer = () => {\n  const { data, error, loading, refetch } = useGetLogbookQuery();\n\n  const onFilterChange = (filters: LogbookFilterInput) => {\n    refetch({ filter: filters});\n  };\n\n  if (loading) {\n    return <LoadingContainer></LoadingContainer>;\n  }\n\n  if (error || !data) {\n    return <ErrorMessage message={error?.message}></ErrorMessage>;\n  }\n\n  return <LogbookOverview data={data.logbook.items as LogbookItem[] || []} onFilterChange={onFilterChange}/>;\n};\n\nexport default LogbookOverviewContainer;","import { gql } from \"@apollo/client\";\n\nexport const MUTATION_CREATE_MATERIALTYPE = gql`\n  mutation CreateMaterialType($materialType: CreateMaterialTypeInput!) {\n    createMaterialType(materialType: $materialType) {\n      id\n      code\n      name\n      description\n      codeFiche\n    }\n  }\n`;\n","import { useMutation } from \"@apollo/client\";\nimport { Button, Form, Input, Modal } from \"antd\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport ErrorMessage from \"components/errorMessage/errorMessage\";\nimport \"./styles.scss\";\nimport { MUTATION_CREATE_MATERIALTYPE } from \"graphql/mutations/createMaterialType\";\n\ninterface Props {\n}\n\nconst AddMaterialTypeModal: React.FC<Props> = () => {\n  const { t } = useTranslation();\n  const [isModalVisible, setIsModalVisible] = React.useState(false);\n  const [graphqlError, setGraphqlError] = React.useState<string>();\n  const [form] = Form.useForm();\n  const [creatematerialType] = useMutation(MUTATION_CREATE_MATERIALTYPE);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const onFinish = async (values: any) => {\n    try {\n      const result = await creatematerialType({ variables: {\n        materialType: {\n          code: values.code,\n          name: values.name,\n          description: values.description,\n          codeFiche: values.codeFiche\n        }\n      }});\n      if (result.data) {\n        form.resetFields();\n        handleReset();\n      }\n    } catch (error: any) {\n      setGraphqlError(error.message);\n    }\n  };\n\n  const handleReset = () => {\n    form.resetFields();\n    setGraphqlError(undefined);\n    setIsModalVisible(false);\n  };\n\n  return (\n    <>\n      <Button type=\"primary\" onClick={showModal}>\n        {t(\"addMaterialTypeModal.openBtn\")}\n      </Button>\n      <Modal title={t(\"addMaterialTypeModal.title\")} visible={isModalVisible} onOk={form.submit} onCancel={handleReset} cancelText={t(\"btn.cancel\")} okText={t(\"btn.save\")}>\n        { graphqlError && (\n          <ErrorMessage message={graphqlError}></ErrorMessage>\n        )}\n        <Form\n          form={form}\n          onFinish={onFinish}\n          autoComplete=\"off\"\n          requiredMark={\"optional\"}\n        >\n          <Form.Item\n            label=\"Code\"\n            name=\"code\"\n            rules={[{ required: true, message: \"This field is required\" }]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Name\"\n            name=\"name\"\n            rules={[{ required: true, message: \"This field is required\" }]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Description\"\n            name=\"description\"\n            rules={[{ required: true, message: \"This field is required\" }]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Code fiche\"\n            name=\"codeFiche\"\n          >\n            <Input />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};\n\nexport default AddMaterialTypeModal;","import * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { GetMaterialTypesQuery } from \"graphql/schema\";\nimport AddMaterialTypeModal from \"./components/addMaterialTypeModal/addMaterialTypeModal\";\nimport \"./styles.scss\";\nimport AppTable from \"components/appTable/appTable\";\n\ninterface Props {\n  data: GetMaterialTypesQuery;\n}\n\ninterface TableItem {\n  code: string;\n  name: string;\n  codeFiche?: string | null;\n}\n\nconst className = \"MaterialOverview\";\n\nconst columns = [\n  {\n    title: \"Code\",\n    dataIndex: \"code\",\n    key: \"code\",\n  },\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"Code Fiche\",\n    dataIndex: \"codeFiche\",\n    key: \"codeFiche\",\n  }\n];\n\nconst MaterialOverview: React.FC<Props> = ({ data }) => {\n  const { t } = useTranslation();\n  const dataSource: TableItem[] = data?.materialTypes?.items.map(material => ({\n    code: material.code,\n    name: material.name,\n    codeFiche: material.codeFiche,\n    key: material.code\n  }) || []);\n\n  return (\n    <div className={className}>\n      <div className=\"page-header\">\n        <h1>{t(\"materialsOverview.title\")}</h1>\n        <AddMaterialTypeModal></AddMaterialTypeModal>\n      </div>\n      \n\n      <AppTable dataSource={dataSource} columns={columns} pagination={true}/>\n    </div>\n  );\n};\n\nexport default MaterialOverview;","import { useGetMaterialTypesQuery } from \"graphql/schema\";\nimport ErrorMessage from \"components/errorMessage/errorMessage\";\nimport LoadingContainer from \"components/loader\";\nimport MaterialOverview from \"./materialsOverview\";\n\nconst MaterialOverviewContainer = () => {\n  const { data, error, loading } = useGetMaterialTypesQuery();\n\n  if (loading) {\n    return <LoadingContainer></LoadingContainer>;\n  }\n\n  if (error || !data) {\n    return <ErrorMessage message={error?.message}></ErrorMessage>;\n  }\n\n  return <MaterialOverview data={data} />;\n};\n\nexport default MaterialOverviewContainer;","import { gql } from \"@apollo/client\";\n\nexport const TRUCK_DETAIL_FRAGMENT = gql`\n  fragment TruckDetailFragment on Truck {\n    id\n    code\n    name\n    compartments {\n      id\n      code\n      name\n      sections {\n        id\n        name\n        imageUrl\n        materials {\n          id\n          type {\n            id\n            code\n            name\n            description\n            codeFiche\n          }\n          serial\n          date\n        }\n      }\n    }\n  }\n`;\n","import { gql } from \"@apollo/client\";\nimport { TRUCK_DETAIL_FRAGMENT } from \"graphql/fragments/truckDetailFragment\";\n\nexport const MUTATION_CREATE_COMPARTMENT = gql`\n  ${TRUCK_DETAIL_FRAGMENT}\n  mutation CreateCompartment($truckId: ID!, $compartment: CreateCompartmentInput!){\n    createCompartment(\n      truckId: $truckId\n      compartment: $compartment\n    ) {\n      ...TruckDetailFragment\n    }\n  }\n`;\n","import { useMutation } from \"@apollo/client\";\nimport { Button, Form, Input, Modal } from \"antd\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport ErrorMessage from \"components/errorMessage/errorMessage\";\nimport \"./styles.scss\";\nimport { MUTATION_CREATE_COMPARTMENT } from \"graphql/mutations/createCompartment\";\n\ninterface Props {\n  truckId: string;\n}\n\nconst AddCompartmentModal: React.FC<Props> = ({ truckId }) => {\n  const { t } = useTranslation();\n  const [isModalVisible, setIsModalVisible] = React.useState(false);\n  const [graphqlError, setGraphqlError] = React.useState<string>();\n  const [form] = Form.useForm();\n  const [createCompartment] = useMutation(MUTATION_CREATE_COMPARTMENT);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const onFinish = async (values: any) => {\n    try {\n      const result = await createCompartment({ variables: {\n        truckId,\n        compartment: {\n          code: values.code,\n          name: values.name\n        }\n      }});\n      if (result.data) {\n        form.resetFields();\n        handleReset();\n      }\n    } catch (error: any) {\n      setGraphqlError(error.message);\n    }\n  };\n\n  const handleReset = () => {\n    form.resetFields();\n    setGraphqlError(undefined);\n    setIsModalVisible(false);\n  };\n\n  return (\n    <>\n      <Button type=\"primary\" onClick={showModal}>\n        {t(\"addCompartmentModal.openBtn\")}\n      </Button>\n      <Modal title={t(\"addCompartmentModal.title\")} visible={isModalVisible} onOk={form.submit} onCancel={handleReset} cancelText={t(\"btn.cancel\")} okText={t(\"btn.save\")}>\n        { graphqlError && (\n          <ErrorMessage message={graphqlError}></ErrorMessage>\n        )}\n        <Form\n          form={form}\n          onFinish={onFinish}\n          autoComplete=\"off\"\n          requiredMark={\"optional\"}\n        >\n          <Form.Item\n            label=\"Code\"\n            name=\"code\"\n            rules={[{ required: true, message: \"This field is required\" }]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Name\"\n            name=\"name\"\n            rules={[{ required: true, message: \"This field is required\" }]}\n          >\n            <Input />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};\n\nexport default AddCompartmentModal;","import { Material } from \"graphql/schema\";\n\nexport const countMaterials = (materials: Material[]): { materialName: string; amount: number }[] => {\n  const counts: { [key: string]: number } = {};\n\n  for (const num of materials?.map(m => m.type.name) || []) {\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\n  }\n  \n  return Object.keys(counts).map(key => ({ key: key, materialName: key, amount: counts[key] })) || [];\n};","import { Row, Col } from \"antd\";\nimport AppTable from \"components/appTable/appTable\";\nimport { Section } from \"graphql/schema\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { countMaterials } from \"utils/material.helper\";\nimport \"./styles.scss\";\n\n\ninterface Props {\n  section: Section;\n}\n\nconst columns = [\n  {\n    title: \"Material\",\n    dataIndex: \"materialName\",\n    key: \"materialName\",\n  },\n  {\n    title: \"Amount\",\n    dataIndex: \"amount\",\n    key: \"amount\",\n  },\n];\n\nconst SectionBlock: React.FC<Props> = ({ section }) => {\n  const { t } = useTranslation();\n\n  // const renderTableFooter = (truckId: string, compartmentId: string, sectionId: string) => (\n  //   <AddMaterialModal truckId={truckId} compartmentId={compartmentId} sectionId={sectionId}></AddMaterialModal>\n  // )\n\n  return (\n    <div className='section-block'>\n      <h1 className='section-title'>{section.name}</h1>\n      <Row gutter={16}>\n        <Col span={8}>\n          {section.imageUrl ?\n            <img src={section.imageUrl} alt={`Section ${section.name}`} className=\"sectionImg\" /> :\n            <p>{t(\"truckDetail.noImage\")}</p>}\n        </Col>\n        <Col span={16}>\n          <AppTable dataSource={countMaterials(section.materials || [])} columns={columns} pagination={false}></AppTable>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default SectionBlock;","import { PlusCircleOutlined } from \"@ant-design/icons\";\nimport { Button, Collapse } from \"antd\";\nimport { Compartment } from \"graphql/schema\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport SectionBlock from \"../sectionBlock/sectionBlock\";\nimport \"./styles.scss\";\n\nconst { Panel } = Collapse;\n\ninterface Props {\n  compartment: Compartment;\n}\n\nconst CompartmentBlock: React.FC<Props> = ({ compartment }) => {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n\n  const callback = (keys: string | string[]) => {\n    setIsOpen(!!keys.length);\n  };\n  const renderAddBtn = () => (\n    isOpen &&\n    <Button\n      ghost\n      className='addSection-btn'\n      onClick={event => {\n        event.stopPropagation();\n      }}\n    >\n      <PlusCircleOutlined />\n      {t(\"addSectionModal.openBtn\")}\n    </Button>\n  );\n\n  return (\n    <Collapse expandIconPosition=\"right\" onChange={callback}>\n      <Panel header={compartment.name} key={compartment.id} extra={renderAddBtn()} forceRender={true}>\n        { compartment.sections.map((section) => (<SectionBlock key={section.id} section={section} />))}\n      </Panel>\n    </Collapse>\n  );\n};\n\nexport default CompartmentBlock;","import { Compartment } from \"graphql/schema\";\nimport * as React from \"react\";\nimport CompartmentBlock from \"./components/compartmentBlock/compartmentBlock\";\nimport \"./styles.scss\";\n\ninterface Props {\n  compartments: Compartment[];\n}\n\nconst CompartmentList: React.FC<Props> = ({ compartments }) => {\n  const sort = (array: any[]): any[] => {\n    return [...array].sort((a, b) => a.code > b.code ? 1 : -1);\n  };\n\n  return (\n    <>\n      {sort(compartments).map((compartment) => (\n        <div className='compartment-block' key={compartment.code}>\n          <CompartmentBlock compartment={compartment} />\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default CompartmentList;","import { PageHeader, Radio, RadioChangeEvent } from \"antd\";\nimport * as React from \"react\";\nimport { GetTruckQuery, LogbookItem, useGetLogbookQuery } from \"graphql/schema\";\nimport AddCompartmentModal from \"./components/addCompartmentModal/addCompartmentModal\";\nimport \"./styles.scss\";\nimport { useHistory } from \"react-router-dom\";\nimport CompartmentList from \"components/compartmentList/compartmentList\";\nimport LogbookList from \"components/logbookList/logbookList\";\n\n\ninterface Props {\n  data: GetTruckQuery\n}\n\nconst className = \"TruckDetail\";\n\nconst TruckDetail: React.FC<Props> = ({ data }) => {\n  const history = useHistory();\n  const { data: logbookData } = useGetLogbookQuery({\n    variables: { filter: { truckIds: [data.truck.id] } }\n  });\n\n  const [radioValue, setRadioValue] = React.useState<string>(\"info\");\n\n  const goToOverview = () => {\n    history.push(\"/trucks\");\n  };\n\n  const goToDetail = (id: string) => {\n    history.push(`/logbook/${id}`);\n  };\n\n  const onRadioChange = (event: RadioChangeEvent) => {\n    setRadioValue(event.target.value);\n  };\n\n  return (\n    <div className={className}>\n      {data && data.truck && (\n        <>\n          <PageHeader\n            className=\"site-page-header\"\n            onBack={goToOverview}\n            title={`${data.truck.name} - (${data.truck.code})`}\n          />\n\n          <div className='btn-header'>\n            <Radio.Group\n              className='radio-group'\n              options={[\n                { label: \"Info\", value: \"info\" },\n                { label: \"Compartments\", value: \"compartments\" },\n                { label: \"Logbook\", value: \"logbook\" },\n              ]}\n              value={radioValue}\n              onChange={onRadioChange}\n              optionType=\"button\"\n              buttonStyle=\"solid\"\n            />\n\n            {radioValue === \"compartments\" && <AddCompartmentModal truckId={data.truck.id}></AddCompartmentModal>}\n          </div>\n\n          {radioValue === \"compartments\" && (<CompartmentList compartments={data.truck.compartments} />)}\n          {radioValue === \"logbook\" && (<LogbookList data={logbookData?.logbook.items as LogbookItem[] || []} onClick={goToDetail} />)}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default TruckDetail;","import { useParams } from \"react-router-dom\";\nimport { useGetTruckQuery } from \"graphql/schema\";\nimport ErrorMessage from \"components/errorMessage/errorMessage\";\nimport LoadingContainer from \"components/loader\";\nimport TruckDetail from \"./truckDetail\";\n\nconst TruckDetailContainer = () => {\n  const { id } = useParams<{ id: string }>();\n  const { data, error, loading } = useGetTruckQuery({\n    variables: { id },\n  });\n\n  if (loading) {\n    return <LoadingContainer></LoadingContainer>;\n  }\n\n  if (error || !data) {\n    return <ErrorMessage message={error?.message}></ErrorMessage>;\n  }\n\n  return <TruckDetail data={data} />;\n};\n\nexport default TruckDetailContainer;","import { Card } from \"antd\";\nimport { Truck } from \"graphql/schema\";\nimport * as React from \"react\";\nimport \"./styles.scss\";\n\ninterface Props {\n  truck: Partial<Truck>;\n}\n\nconst randomIntFromInterval = (min: number, max: number) => { // min and max included \n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst TruckCard: React.FC<Props> = ({ truck }) => {\n  return (\n    <Card\n      hoverable\n      style={{ width: 340 }}\n      cover={<img alt={`Detail of ${truck.name}`} src={`https://picsum.photos/200/300?random=${randomIntFromInterval(1,100)}`} className='truckImg'/>}\n    >\n      <h2>{truck.code}</h2>\n      <h1>{truck.name}</h1>\n    </Card>\n  );\n};\n\nexport default TruckCard;","import { Col, Input, Row } from \"antd\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GetTrucksQuery, Truck, TruckFilterInput } from \"graphql/schema\";\nimport \"./styles.scss\";\nimport TruckCard from \"components/truckCard/truckCard\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport { useTranslation } from \"react-i18next\";\nimport LoadingContainer from \"components/loader\";\n\ninterface Props {\n  data: GetTrucksQuery;\n  loading: boolean;\n  onFilterChange: (filter: TruckFilterInput) => void\n}\n\nconst className = \"TruckOverview\";\n\nconst TruckOverview: React.FC<Props> = ({ data, loading, onFilterChange }) => {\n  const { t } = useTranslation();\n\n  const onSearchChange = (value: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange({ search: value.target.value });\n  };\n\n  return (\n    <div className={className}>\n      <section className=\"filter-section\">\n        <Input className=\"search-box\" size=\"large\" placeholder={t(\"search\")} prefix={<SearchOutlined />} onChange={onSearchChange} />\n      </section>\n\n      {loading ?\n        <LoadingContainer></LoadingContainer> :\n        (\n          <Row gutter={[32, 32]}>\n            {!!data.trucks &&\n              data.trucks.items.map(\n                (truck: Partial<Truck>, i: number) =>\n                  !!truck && !!truck.id && (\n                    <Col key={i}>\n                      <Link to={\"trucks/\" + truck.id}>\n                        <TruckCard truck={truck} />\n                      </Link>\n                    </Col>\n                  ),\n              )}\n          </Row>\n        )\n      }\n    </div>\n  );\n};\n\nexport default TruckOverview;","\nimport ErrorMessage from \"components/errorMessage/errorMessage\";\nimport { TruckFilterInput, useGetTrucksQuery } from \"graphql/schema\";\nimport TruckOverview from \"./truckOverview\";\n\nconst TruckOverviewContainer = () => {\n  const { data, error, loading, refetch } = useGetTrucksQuery({\n    variables: { }\n  });\n\n  const onFilterChange = (filter: TruckFilterInput) => {\n    refetch({ filter });\n  };\n\n  if (error || !data) {\n    return <ErrorMessage message={error?.message}></ErrorMessage>;\n  }\n\n  return <TruckOverview loading={loading} data={data} onFilterChange={onFilterChange} />;\n};\n\nexport default TruckOverviewContainer;","import * as React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport AddLogbookItemContainer from \"components/addLogbookItem\";\nimport LogbookItemDetailContainer from \"pages/logbook/logbookDetail\";\nimport LogbookOverviewContainer from \"pages/logbook/logbookOverview\";\nimport MaterialOverviewContainer from \"pages/material/materialsOverview\";\nimport TruckDetailContainer from \"pages/truck/truckDetail\";\nimport TruckOverviewContainer from \"pages/truck/truckOverview\";\nimport \"./styles.scss\";\n\ninterface Props {\n\n}\n\nconst AppRouter: React.FC<Props> = () => {\n  return (\n    <Switch>\n      <Route path=\"/trucks\" exact={true}>\n        <TruckOverviewContainer />\n      </Route>\n      <Route path=\"/trucks/:id\"><TruckDetailContainer /></Route>\n      <Route path=\"/materials\">\n        <MaterialOverviewContainer></MaterialOverviewContainer>\n      </Route>\n      <Route path=\"/logbook\" exact={true}>\n        <LogbookOverviewContainer></LogbookOverviewContainer>\n      </Route>\n      <Route path=\"/logbook/new\" exact={true}>\n        <AddLogbookItemContainer></AddLogbookItemContainer>\n      </Route>\n      <Route path=\"/logbook/:id\" >\n        <LogbookItemDetailContainer></LogbookItemDetailContainer>\n      </Route>\n      <Route path=\"/about\" exact={true}>\n        <div>\n          <h1>About</h1>\n        </div>\n      </Route>\n      <Route path=\"/\" exact={true}>\n        <Redirect to=\"/trucks\" />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default AppRouter;","import * as React from \"react\";\nimport { Layout } from \"antd\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport Sider from \"antd/lib/layout/Sider\";\nimport { CloseOutlined } from \"@ant-design/icons\";\nimport AppFooter from \"./components/footer/footer\";\nimport SideNavigation from \"./components/sideNavigation/sideNavigation\";\nimport \"./styles.scss\";\nimport AppHeader from \"./components/header/header\";\nimport AppRouter from \"./appRouter\";\n\ninterface Props {\n\n}\n\nconst AppLayout: React.FC<Props> = () => {\n  const [collapsed, setCollapsed] = React.useState<boolean>(false);\n  const [hasBroken, setHasBroken] = React.useState<boolean>(false);\n\n  const onBreak = (hasBroken: boolean) => {\n    setCollapsed(hasBroken);\n    setHasBroken(hasBroken);\n  };\n\n  // Collapse menu on urlChange when display is to small\n  const onUrlChange = () => {\n    if (hasBroken) {\n      setCollapsed(true);\n    }\n  };\n\n  return (\n    <Layout className=\"rootSection\">\n      <Sider\n        className='sideBar'\n        style={{ position: hasBroken ? \"absolute\" : \"relative\", minHeight: \"100vh\", padding: collapsed ? 0 : \"20px\" }}\n        width={256}\n        trigger={null}\n        collapsible\n        collapsed={collapsed}\n        collapsedWidth={0}\n        breakpoint=\"lg\"\n        onBreakpoint={onBreak}\n      >\n        <div className='sideBar__row'>\n          <div className='sideBar__logo'>\n            <span className='sideBar__logo__focus'>Brandweer</span>\n            <span>Poperinge</span>\n          </div>\n\n          { hasBroken && <CloseOutlined onClick={() => setCollapsed(true)} className=\"closeIcon\" /> }\n        </div>\n        <SideNavigation onUrlChange={onUrlChange} />\n      </Sider>\n\n      <Layout>\n        <AppHeader collapsed={collapsed} hasBroken={hasBroken} setCollapsed={setCollapsed}/>\n\n        <Content style={{ margin: \"80px 40px 0\" }}>\n          <AppRouter></AppRouter>\n        </Content>\n\n        <AppFooter />\n      </Layout>\n    </Layout>\n  );\n};\n\n\n\nexport default AppLayout;","import AppLayout from \"./appLayout\";\n\nconst AppLayoutContainer = () => {\n  return <AppLayout />;\n};\n\nexport default AppLayoutContainer;","import \"./app.scss\";\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\nimport AppLayoutContainer from \"./layout\";\nimport { useAuth } from \"@frontegg/react\";\n\nfunction App() {\n  const { user, isAuthenticated } = useAuth();\n\n  if (user) {\n    localStorage.setItem(\"token\", user.accessToken);\n  }\n\n  return (\n    <Router>\n      { isAuthenticated ?\n        <AppLayoutContainer></AppLayoutContainer> :\n        <div>Not authenticated</div>\n      }\n    </Router>\n  );\n}\n\nexport default App;\n","import { en } from \"./en\";\n\nconst Translations = {\n  en: {\n    translation: en,\n  },\n};\n\nexport default Translations;\n","export const en = {\n  authentication: {\n    login: \"Login\",\n  },\n  search: \"Search\",\n  landingPage: {\n    title: \"Firefighter Tool Manager\",\n    description: \"Please login\",\n  },\n  footer: {\n    mainText: \"Firefighter Tool Manager by Sander Verkaemer\",\n  },\n  navigation: {\n    trucks: \"Trucks\",\n    materials: \"Materials\",\n    logbook: \"Logbook\",\n    about: \"About\",\n    logout: \"Logout\",\n    settings: \"Settings\",\n  },\n  loading: \"Loading...\",\n  materialsOverview: {\n    title: \"Materials\",\n  },\n  truckDetail: {\n    noImage: \"No image\",\n    noSection: \"No section\",\n    printList: \"Print list\"\n  },\n  addCompartmentModal: {\n    openBtn: \"Create compartment\",\n    title: \"Create compartment\",\n  },\n  addSectionModal: {\n    openBtn: \"Add section\",\n    title: \"Add section\",\n  },\n  addMaterialTypeModal: {\n    openBtn: \"Add material type\",\n    title: \"Add material type\",\n  },\n  addMaterialModal: {\n    openBtn: \"Add material\",\n    title: \"Add material\",\n  },\n  btn: {\n    cancel: \"Cancel\",\n    save: \"Save\",\n  },\n  errors: {\n    somethingWentWrong: \"Something went wrong!\"\n  },\n  logbookOverview: {\n    title: \"Logbook\",\n    period: \"Created at\",\n    truck: \"Truck\",\n    status: \"Status\",\n    types: \"Types\"\n  },\n  logbookItems: {\n    type: \"Type\",\n    truck: \"Truck\",\n    user: \"User\",\n    status: \"Status\",\n    createdAt: \"Created at\",\n  },\n  logbookItemType: {\n    problem_report: \"Problem report\",\n    material_check: \"Material check\"\n  },\n  logbookItemDetail: {\n    material_check: {\n      title: \"Material check\",\n      recap: \"Recap\",\n    },\n    problem_report: {\n      title: \"Problem report\"\n    }\n  },\n  addLogbookItem: {\n    material_check: {\n      title: \"Material check\",\n    },\n    problem_report: {\n      title: \"Problem report\"\n    }\n  },\n  addLogbookItemModal: {\n    openBtn: \"Add logbook item\",\n    title: \"Add logbook item\",\n  },\n  historyStatus: {\n    created: \"Created\",\n    reviewed: \"Reviewed\",\n    finished: \"Finished\",\n    unknown: \"Unknown\"\n  },\n  problemReportForm: {\n    save: \"Save\",\n    truck: {\n      placeholder: \"Choose truck\"\n    },\n    addProblem: \"Add problem\"\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloClient, ApolloProvider, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport App from \"./app\";\nimport i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Translations from \"./translations\";\nimport { FronteggProvider } from \"@frontegg/react\";\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:3000/graphql\",\n  // uri: 'https://brw-fmgt-api.herokuapp.com/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nconst contextOptions = {\n  baseUrl: \"https://app-grh37bz1gon0.frontegg.com\",\n};\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources: Translations,\n    lng: \"en\",\n    fallbackLng: \"en\",\n    interpolation: {\n      escapeValue: false\n    }\n  });\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <FronteggProvider contextOptions={contextOptions}>\n        <App />\n      </FronteggProvider>\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}